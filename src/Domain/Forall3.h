//AUTOGENERATED BY genForallN.py
  
#ifndef __DOMAIN_FORALL3_H__
#define __DOMAIN_FORALL3_H__

#include<RAJA/RAJA.hxx>


    template<typename POLICY, typename TI, typename TJ, typename TK, typename BODY>
    RAJA_INLINE void forall3(TI const &is_i, TJ const &is_j, TK const &is_k, BODY const &body){
      typedef typename POLICY::LoopOrder L;
      forall3<POLICY, TI, TJ, TK, BODY>(L(), is_i, is_j, is_k, body);
    }

    template<typename LOOP_ORDER, typename POL_I, typename POL_J, typename POL_K>
    struct ForallPolicy3 {
      typedef LOOP_ORDER LoopOrder;
      typedef POL_I PolicyI;
      typedef POL_J PolicyJ;
      typedef POL_K PolicyK;
    };


/******************************************************************
 *  Implementation for permutations of forall3()
 ******************************************************************/

      template<typename POLICY, typename TI, typename TJ, typename TK, typename BODY>
      RAJA_INLINE void forall3(PERM_IJK, TI const &is_i, TJ const &is_j, TK const &is_k, BODY const &body){
        RAJA::forall<typename POLICY::PolicyI>(is_i, [&](int i){
          RAJA::forall<typename POLICY::PolicyJ>(is_j, [&](int j){
            RAJA::forall<typename POLICY::PolicyK>(is_k, [&](int k){
              body(i, j, k);
            });
          });
        });
      }

      template<typename POLICY, typename TI, typename TJ, typename TK, typename BODY>
      RAJA_INLINE void forall3(PERM_IKJ, TI const &is_i, TJ const &is_j, TK const &is_k, BODY const &body){
        RAJA::forall<typename POLICY::PolicyI>(is_i, [&](int i){
          RAJA::forall<typename POLICY::PolicyK>(is_k, [&](int k){
            RAJA::forall<typename POLICY::PolicyJ>(is_j, [&](int j){
              body(i, j, k);
            });
          });
        });
      }

      template<typename POLICY, typename TI, typename TJ, typename TK, typename BODY>
      RAJA_INLINE void forall3(PERM_JIK, TI const &is_i, TJ const &is_j, TK const &is_k, BODY const &body){
        RAJA::forall<typename POLICY::PolicyJ>(is_j, [&](int j){
          RAJA::forall<typename POLICY::PolicyI>(is_i, [&](int i){
            RAJA::forall<typename POLICY::PolicyK>(is_k, [&](int k){
              body(i, j, k);
            });
          });
        });
      }

      template<typename POLICY, typename TI, typename TJ, typename TK, typename BODY>
      RAJA_INLINE void forall3(PERM_JKI, TI const &is_i, TJ const &is_j, TK const &is_k, BODY const &body){
        RAJA::forall<typename POLICY::PolicyJ>(is_j, [&](int j){
          RAJA::forall<typename POLICY::PolicyK>(is_k, [&](int k){
            RAJA::forall<typename POLICY::PolicyI>(is_i, [&](int i){
              body(i, j, k);
            });
          });
        });
      }

      template<typename POLICY, typename TI, typename TJ, typename TK, typename BODY>
      RAJA_INLINE void forall3(PERM_KIJ, TI const &is_i, TJ const &is_j, TK const &is_k, BODY const &body){
        RAJA::forall<typename POLICY::PolicyK>(is_k, [&](int k){
          RAJA::forall<typename POLICY::PolicyI>(is_i, [&](int i){
            RAJA::forall<typename POLICY::PolicyJ>(is_j, [&](int j){
              body(i, j, k);
            });
          });
        });
      }

      template<typename POLICY, typename TI, typename TJ, typename TK, typename BODY>
      RAJA_INLINE void forall3(PERM_KJI, TI const &is_i, TJ const &is_j, TK const &is_k, BODY const &body){
        RAJA::forall<typename POLICY::PolicyK>(is_k, [&](int k){
          RAJA::forall<typename POLICY::PolicyJ>(is_j, [&](int j){
            RAJA::forall<typename POLICY::PolicyI>(is_i, [&](int i){
              body(i, j, k);
            });
          });
        });
      }


  
#endif

