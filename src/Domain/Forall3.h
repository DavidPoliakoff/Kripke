//AUTOGENERATED BY genForallN.py
  
#ifndef __DOMAIN_FORALL3_H__
#define __DOMAIN_FORALL3_H__

#include<RAJA/RAJA.hxx>
#include<Domain/Tile.h>



/******************************************************************
 *  Policy base class, forall3()
 ******************************************************************/

    // Interchange-loops and Execute (Base-case for all policies)
    struct Forall3_Execute_Tag {};
    template<typename LOOP_ORDER, typename POL_I, typename POL_J, typename POL_K>
    struct Forall3_Execute {
      typedef Forall3_Execute_Tag PolicyTag;
      typedef LOOP_ORDER LoopOrder;
      typedef POL_I PolicyI;
      typedef POL_J PolicyJ;
      typedef POL_K PolicyK;
    };

    // Begin OpenMP Parallel Block
    struct Forall3_OMP_Parallel_Tag {};
    template<typename NEXT>
    struct Forall3_OMP_Parallel {
      typedef Forall3_OMP_Parallel_Tag PolicyTag;
      typedef NEXT NextPolicy;
    };

    // Tiling Policy
    struct Forall3_Tile_Tag {};
    template<typename TILE_I, typename TILE_J, typename TILE_K, typename NEXT>
    struct Forall3_Tile {
      typedef Forall3_Tile_Tag PolicyTag;
      typedef NEXT NextPolicy;
      typedef TILE_I TileI;
      typedef TILE_J TileJ;
      typedef TILE_K TileK;
    };


/******************************************************************
 *  Default Executor for forall3()
 ******************************************************************/

    template<typename POLICY_I, typename POLICY_J, typename POLICY_K, typename TI, typename TJ, typename TK>
    class Forall3Executor {
      public:  
        template<typename BODY>
        inline void operator()(TI const &is_i, TJ const &is_j, TK const &is_k, BODY const &body) const {
          RAJA::forall<POLICY_I>(is_i, RAJA_LAMBDA(int i){
            exec(is_j, is_k, RAJA_LAMBDA(int j, int k){
              body(i, j, k);
            });
          });
        }

      private:
        Forall2Executor<POLICY_J, POLICY_K, TJ, TK> exec;
    };


/******************************************************************
 *  OpenMP Auto-Collapsing Executors for forall3()
 ******************************************************************/

#ifdef _OPENMP

    // OpenMP Executor with collapse(2) for omp_parallel_for_exec
    template<typename POLICY_K, typename TK>
    class Forall3Executor<RAJA::omp_parallel_for_exec, RAJA::omp_parallel_for_exec, POLICY_K, RAJA::RangeSegment, RAJA::RangeSegment, TK> {
      public:  
        template<typename BODY>
        inline void operator()(RAJA::RangeSegment const &is_i, RAJA::RangeSegment const &is_j, TK const &is_k, BODY const &body) const {
          int const i_start = is_i.getBegin();
          int const i_end   = is_i.getEnd();

          int const j_start = is_j.getBegin();
          int const j_end   = is_j.getEnd();

#pragma omp parallel for schedule(static) collapse(2)
          for(int i = i_start;i < i_end;++ i){
            for(int j = j_start;j < j_end;++ j){
              RAJA::forall<POLICY_K>(is_k, RAJA_LAMBDA(int k){
                body(i, j, k);
              });
          } } 
        }
    };

    // OpenMP Executor with collapse(3) for omp_parallel_for_exec
    template<>
    class Forall3Executor<RAJA::omp_parallel_for_exec, RAJA::omp_parallel_for_exec, RAJA::omp_parallel_for_exec, RAJA::RangeSegment, RAJA::RangeSegment, RAJA::RangeSegment> {
      public:  
        template<typename BODY>
        inline void operator()(RAJA::RangeSegment const &is_i, RAJA::RangeSegment const &is_j, RAJA::RangeSegment const &is_k, BODY const &body) const {
          int const i_start = is_i.getBegin();
          int const i_end   = is_i.getEnd();

          int const j_start = is_j.getBegin();
          int const j_end   = is_j.getEnd();

          int const k_start = is_k.getBegin();
          int const k_end   = is_k.getEnd();

#pragma omp parallel for schedule(static) collapse(3)
          for(int i = i_start;i < i_end;++ i){
            for(int j = j_start;j < j_end;++ j){
              for(int k = k_start;k < k_end;++ k){
                body(i, j, k);
          } } } 
        }
    };

    // OpenMP Executor with collapse(2) for omp_for_nowait_exec
    template<typename POLICY_K, typename TK>
    class Forall3Executor<RAJA::omp_for_nowait_exec, RAJA::omp_for_nowait_exec, POLICY_K, RAJA::RangeSegment, RAJA::RangeSegment, TK> {
      public:  
        template<typename BODY>
        inline void operator()(RAJA::RangeSegment const &is_i, RAJA::RangeSegment const &is_j, TK const &is_k, BODY const &body) const {
          int const i_start = is_i.getBegin();
          int const i_end   = is_i.getEnd();

          int const j_start = is_j.getBegin();
          int const j_end   = is_j.getEnd();

#pragma omp for schedule(static) collapse(2) nowait
          for(int i = i_start;i < i_end;++ i){
            for(int j = j_start;j < j_end;++ j){
              RAJA::forall<POLICY_K>(is_k, RAJA_LAMBDA(int k){
                body(i, j, k);
              });
          } } 
        }
    };

    // OpenMP Executor with collapse(3) for omp_for_nowait_exec
    template<>
    class Forall3Executor<RAJA::omp_for_nowait_exec, RAJA::omp_for_nowait_exec, RAJA::omp_for_nowait_exec, RAJA::RangeSegment, RAJA::RangeSegment, RAJA::RangeSegment> {
      public:  
        template<typename BODY>
        inline void operator()(RAJA::RangeSegment const &is_i, RAJA::RangeSegment const &is_j, RAJA::RangeSegment const &is_k, BODY const &body) const {
          int const i_start = is_i.getBegin();
          int const i_end   = is_i.getEnd();

          int const j_start = is_j.getBegin();
          int const j_end   = is_j.getEnd();

          int const k_start = is_k.getBegin();
          int const k_end   = is_k.getEnd();

#pragma omp for schedule(static) collapse(3) nowait
          for(int i = i_start;i < i_end;++ i){
            for(int j = j_start;j < j_end;++ j){
              for(int k = k_start;k < k_end;++ k){
                body(i, j, k);
          } } } 
        }
    };


#endif // _OPENMP


/******************************************************************
 *  Permutations layer for forall3()
 ******************************************************************/

      template<typename POLICY, typename TI, typename TJ, typename TK, typename BODY>
      RAJA_INLINE void forall3_permute(PERM_IJK, TI const &is_i, TJ const &is_j, TK const &is_k, BODY const &body){
        Forall3Executor<typename POLICY::PolicyI, typename POLICY::PolicyJ, typename POLICY::PolicyK, TI, TJ, TK> exec;
        exec(is_i, is_j, is_k, RAJA_LAMBDA(int i, int j, int k){
          body(i, j, k);
        });
      }

      template<typename POLICY, typename TI, typename TJ, typename TK, typename BODY>
      RAJA_INLINE void forall3_permute(PERM_IKJ, TI const &is_i, TJ const &is_j, TK const &is_k, BODY const &body){
        Forall3Executor<typename POLICY::PolicyI, typename POLICY::PolicyK, typename POLICY::PolicyJ, TI, TK, TJ> exec;
        exec(is_i, is_k, is_j, RAJA_LAMBDA(int i, int k, int j){
          body(i, j, k);
        });
      }

      template<typename POLICY, typename TI, typename TJ, typename TK, typename BODY>
      RAJA_INLINE void forall3_permute(PERM_JIK, TI const &is_i, TJ const &is_j, TK const &is_k, BODY const &body){
        Forall3Executor<typename POLICY::PolicyJ, typename POLICY::PolicyI, typename POLICY::PolicyK, TJ, TI, TK> exec;
        exec(is_j, is_i, is_k, RAJA_LAMBDA(int j, int i, int k){
          body(i, j, k);
        });
      }

      template<typename POLICY, typename TI, typename TJ, typename TK, typename BODY>
      RAJA_INLINE void forall3_permute(PERM_JKI, TI const &is_i, TJ const &is_j, TK const &is_k, BODY const &body){
        Forall3Executor<typename POLICY::PolicyJ, typename POLICY::PolicyK, typename POLICY::PolicyI, TJ, TK, TI> exec;
        exec(is_j, is_k, is_i, RAJA_LAMBDA(int j, int k, int i){
          body(i, j, k);
        });
      }

      template<typename POLICY, typename TI, typename TJ, typename TK, typename BODY>
      RAJA_INLINE void forall3_permute(PERM_KIJ, TI const &is_i, TJ const &is_j, TK const &is_k, BODY const &body){
        Forall3Executor<typename POLICY::PolicyK, typename POLICY::PolicyI, typename POLICY::PolicyJ, TK, TI, TJ> exec;
        exec(is_k, is_i, is_j, RAJA_LAMBDA(int k, int i, int j){
          body(i, j, k);
        });
      }

      template<typename POLICY, typename TI, typename TJ, typename TK, typename BODY>
      RAJA_INLINE void forall3_permute(PERM_KJI, TI const &is_i, TJ const &is_j, TK const &is_k, BODY const &body){
        Forall3Executor<typename POLICY::PolicyK, typename POLICY::PolicyJ, typename POLICY::PolicyI, TK, TJ, TI> exec;
        exec(is_k, is_j, is_i, RAJA_LAMBDA(int k, int j, int i){
          body(i, j, k);
        });
      }


/******************************************************************
 *  OpenMP Parallel Region forall3()
 ******************************************************************/

#ifdef _OPENMP

    template<typename POLICY, typename TI, typename TJ, typename TK, typename BODY>
    RAJA_INLINE void forall3(Forall3_OMP_Parallel_Tag, TI const &is_i, TJ const &is_j, TK const &is_k, BODY const &body){
      typedef typename POLICY::NextPolicy NextPolicy;
      typedef typename POLICY::NextPolicy::PolicyTag NextPolicyTag;
      // create OpenMP Parallel Region
#pragma omp parallel
      {
        // execute the next policy
        forall3<NextPolicy, TI, TJ, TK, BODY>(NextPolicyTag(), is_i, is_j, is_k, body);
      }
    }

#endif


/******************************************************************
 *  Tiling Policy for forall3()
 ******************************************************************/

    template<typename POLICY, typename TI, typename TJ, typename TK, typename BODY>
    RAJA_INLINE void forall3(Forall3_Tile_Tag, TI const &is_i, TJ const &is_j, TK const &is_k, BODY const &body){
      typedef typename POLICY::NextPolicy NextPolicy;
      typedef typename POLICY::NextPolicy::PolicyTag NextPolicyTag;
      typedef typename POLICY::TileI TileI;
      typedef typename POLICY::TileJ TileJ;
      typedef typename POLICY::TileK TileK;

      // execute the next policy
      forall_tile(TileI(), is_i, [=](auto is_ii){
        forall_tile(TileJ(), is_j, [=](auto is_jj){
          forall_tile(TileK(), is_k, [=](auto is_kk){
            forall3<NextPolicy, TI, TJ, TK, BODY>(NextPolicyTag(), is_ii, is_jj, is_kk, body);
          });
        });
      });
    }



/******************************************************************
 *  Execute policy, forall3()
 ******************************************************************/

    template<typename POLICY, typename TI, typename TJ, typename TK, typename BODY>
    RAJA_INLINE void forall3(Forall3_Execute_Tag, TI const &is_i, TJ const &is_j, TK const &is_k, BODY const &body){
      typedef typename POLICY::LoopOrder L;
      forall3_permute<POLICY, TI, TJ, TK, BODY>(L(), is_i, is_j, is_k, body);
    }


/******************************************************************
 *  User interface, forall3()
 ******************************************************************/

    template<typename POLICY, typename IdxI=int, typename IdxJ=int, typename IdxK=int, typename TI, typename TJ, typename TK, typename BODY>
    RAJA_INLINE void forall3(TI const &is_i, TJ const &is_j, TK const &is_k, BODY const &body){
      typedef typename POLICY::PolicyTag PolicyTag;
      forall3<POLICY, TI, TJ, TK>(PolicyTag(), is_i, is_j, is_k, 
        [=](int i, int j, int k){
          body(IdxI(i), IdxJ(j), IdxK(k));
        }
      );
    }


  
#endif

