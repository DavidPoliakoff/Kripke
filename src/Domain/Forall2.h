//AUTOGENERATED BY genForallN.py
  
#ifndef __DOMAIN_FORALL2_H__
#define __DOMAIN_FORALL2_H__

#include<RAJA/RAJA.hxx>


    template<typename LOOP_NEST, typename LOOP_ORDER, typename POL_I, typename POL_J>
    struct ForallPolicy2 {
      typedef LOOP_NEST LoopNesting;
      typedef LOOP_ORDER LoopOrder;      
      typedef POL_I PolicyI;
      typedef POL_J PolicyJ;
    };


/******************************************************************
 *  Implementation for permutations of forall2()
 ******************************************************************/

      template<typename POLICYI, typename POLICYJ, typename TI, typename TJ, typename BODY>
      RAJA_INLINE void forall2_final(LOOP_NEST_EXPLICIT, TI const &is_i, TJ const &is_j, BODY const &body){
        RAJA::forall<POLICYI>(is_i, RAJA_LAMBDA(int i){
          RAJA::forall<POLICYJ>(is_j, RAJA_LAMBDA(int j){
            body(i, j);
          });
        });
      }
    


      template<typename POLICY, typename TI, typename TJ, typename BODY>
      RAJA_INLINE void forall2_permute(PERM_IJ, TI const &is_i, TJ const &is_j, BODY const &body){
        typedef typename POLICY::LoopNesting N;
        forall2_final<typename POLICY::PolicyI, typename POLICY::PolicyJ, TI, TJ>
          ( N(), is_i, is_j, [&](int i, int j){
            body(i, j);
          });        
      }

      template<typename POLICY, typename TI, typename TJ, typename BODY>
      RAJA_INLINE void forall2_permute(PERM_JI, TI const &is_i, TJ const &is_j, BODY const &body){
        typedef typename POLICY::LoopNesting N;
        forall2_final<typename POLICY::PolicyJ, typename POLICY::PolicyI, TJ, TI>
          ( N(), is_j, is_i, [&](int i, int j){
            body(j, i);
          });        
      }


    template<typename POLICY, typename TI, typename TJ, typename BODY>
    RAJA_INLINE void forall2(TI const &is_i, TJ const &is_j, BODY const &body){
      typedef typename POLICY::LoopOrder L;
      forall2_permute<POLICY, TI, TJ, BODY>(L(), is_i, is_j, body);
    }

  
#endif

