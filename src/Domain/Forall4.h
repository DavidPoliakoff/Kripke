//AUTOGENERATED BY genForallN.py
  
#ifndef __DOMAIN_FORALL4_H__
#define __DOMAIN_FORALL4_H__



    template<typename POLICY, typename BODY>
    inline void forall4(int end_i, int end_j, int end_k, int end_l, BODY const &body){
      typedef typename POLICY::layout L;
      forall4<POLICY, BODY>(L(), end_i, end_j, end_k, end_l, body);
    }

/******************************************************************
 *  Implementation for permutations of forall4()
 ******************************************************************/

      template<typename POLICY, typename BODY>
      inline void forall4(LAYOUT_IJKL, int end_i, int end_j, int end_k, int end_l, BODY const &body){
        forall<typename POLICY::pol_i>(0, end_i, [=](int i){
          forall<typename POLICY::pol_j>(0, end_j, [=](int j){
            forall<typename POLICY::pol_k>(0, end_k, [=](int k){
              forall<typename POLICY::pol_l>(0, end_l, [=](int l){
                body(i, j, k, l);
              });
            });
          });
        });
      }

      template<typename POLICY, typename BODY>
      inline void forall4(LAYOUT_IJLK, int end_i, int end_j, int end_k, int end_l, BODY const &body){
        forall<typename POLICY::pol_i>(0, end_i, [=](int i){
          forall<typename POLICY::pol_j>(0, end_j, [=](int j){
            forall<typename POLICY::pol_l>(0, end_l, [=](int l){
              forall<typename POLICY::pol_k>(0, end_k, [=](int k){
                body(i, j, k, l);
              });
            });
          });
        });
      }

      template<typename POLICY, typename BODY>
      inline void forall4(LAYOUT_IKJL, int end_i, int end_j, int end_k, int end_l, BODY const &body){
        forall<typename POLICY::pol_i>(0, end_i, [=](int i){
          forall<typename POLICY::pol_k>(0, end_k, [=](int k){
            forall<typename POLICY::pol_j>(0, end_j, [=](int j){
              forall<typename POLICY::pol_l>(0, end_l, [=](int l){
                body(i, j, k, l);
              });
            });
          });
        });
      }

      template<typename POLICY, typename BODY>
      inline void forall4(LAYOUT_IKLJ, int end_i, int end_j, int end_k, int end_l, BODY const &body){
        forall<typename POLICY::pol_i>(0, end_i, [=](int i){
          forall<typename POLICY::pol_k>(0, end_k, [=](int k){
            forall<typename POLICY::pol_l>(0, end_l, [=](int l){
              forall<typename POLICY::pol_j>(0, end_j, [=](int j){
                body(i, j, k, l);
              });
            });
          });
        });
      }

      template<typename POLICY, typename BODY>
      inline void forall4(LAYOUT_ILJK, int end_i, int end_j, int end_k, int end_l, BODY const &body){
        forall<typename POLICY::pol_i>(0, end_i, [=](int i){
          forall<typename POLICY::pol_l>(0, end_l, [=](int l){
            forall<typename POLICY::pol_j>(0, end_j, [=](int j){
              forall<typename POLICY::pol_k>(0, end_k, [=](int k){
                body(i, j, k, l);
              });
            });
          });
        });
      }

      template<typename POLICY, typename BODY>
      inline void forall4(LAYOUT_ILKJ, int end_i, int end_j, int end_k, int end_l, BODY const &body){
        forall<typename POLICY::pol_i>(0, end_i, [=](int i){
          forall<typename POLICY::pol_l>(0, end_l, [=](int l){
            forall<typename POLICY::pol_k>(0, end_k, [=](int k){
              forall<typename POLICY::pol_j>(0, end_j, [=](int j){
                body(i, j, k, l);
              });
            });
          });
        });
      }

      template<typename POLICY, typename BODY>
      inline void forall4(LAYOUT_JIKL, int end_i, int end_j, int end_k, int end_l, BODY const &body){
        forall<typename POLICY::pol_j>(0, end_j, [=](int j){
          forall<typename POLICY::pol_i>(0, end_i, [=](int i){
            forall<typename POLICY::pol_k>(0, end_k, [=](int k){
              forall<typename POLICY::pol_l>(0, end_l, [=](int l){
                body(i, j, k, l);
              });
            });
          });
        });
      }

      template<typename POLICY, typename BODY>
      inline void forall4(LAYOUT_JILK, int end_i, int end_j, int end_k, int end_l, BODY const &body){
        forall<typename POLICY::pol_j>(0, end_j, [=](int j){
          forall<typename POLICY::pol_i>(0, end_i, [=](int i){
            forall<typename POLICY::pol_l>(0, end_l, [=](int l){
              forall<typename POLICY::pol_k>(0, end_k, [=](int k){
                body(i, j, k, l);
              });
            });
          });
        });
      }

      template<typename POLICY, typename BODY>
      inline void forall4(LAYOUT_JKIL, int end_i, int end_j, int end_k, int end_l, BODY const &body){
        forall<typename POLICY::pol_j>(0, end_j, [=](int j){
          forall<typename POLICY::pol_k>(0, end_k, [=](int k){
            forall<typename POLICY::pol_i>(0, end_i, [=](int i){
              forall<typename POLICY::pol_l>(0, end_l, [=](int l){
                body(i, j, k, l);
              });
            });
          });
        });
      }

      template<typename POLICY, typename BODY>
      inline void forall4(LAYOUT_JKLI, int end_i, int end_j, int end_k, int end_l, BODY const &body){
        forall<typename POLICY::pol_j>(0, end_j, [=](int j){
          forall<typename POLICY::pol_k>(0, end_k, [=](int k){
            forall<typename POLICY::pol_l>(0, end_l, [=](int l){
              forall<typename POLICY::pol_i>(0, end_i, [=](int i){
                body(i, j, k, l);
              });
            });
          });
        });
      }

      template<typename POLICY, typename BODY>
      inline void forall4(LAYOUT_JLIK, int end_i, int end_j, int end_k, int end_l, BODY const &body){
        forall<typename POLICY::pol_j>(0, end_j, [=](int j){
          forall<typename POLICY::pol_l>(0, end_l, [=](int l){
            forall<typename POLICY::pol_i>(0, end_i, [=](int i){
              forall<typename POLICY::pol_k>(0, end_k, [=](int k){
                body(i, j, k, l);
              });
            });
          });
        });
      }

      template<typename POLICY, typename BODY>
      inline void forall4(LAYOUT_JLKI, int end_i, int end_j, int end_k, int end_l, BODY const &body){
        forall<typename POLICY::pol_j>(0, end_j, [=](int j){
          forall<typename POLICY::pol_l>(0, end_l, [=](int l){
            forall<typename POLICY::pol_k>(0, end_k, [=](int k){
              forall<typename POLICY::pol_i>(0, end_i, [=](int i){
                body(i, j, k, l);
              });
            });
          });
        });
      }

      template<typename POLICY, typename BODY>
      inline void forall4(LAYOUT_KIJL, int end_i, int end_j, int end_k, int end_l, BODY const &body){
        forall<typename POLICY::pol_k>(0, end_k, [=](int k){
          forall<typename POLICY::pol_i>(0, end_i, [=](int i){
            forall<typename POLICY::pol_j>(0, end_j, [=](int j){
              forall<typename POLICY::pol_l>(0, end_l, [=](int l){
                body(i, j, k, l);
              });
            });
          });
        });
      }

      template<typename POLICY, typename BODY>
      inline void forall4(LAYOUT_KILJ, int end_i, int end_j, int end_k, int end_l, BODY const &body){
        forall<typename POLICY::pol_k>(0, end_k, [=](int k){
          forall<typename POLICY::pol_i>(0, end_i, [=](int i){
            forall<typename POLICY::pol_l>(0, end_l, [=](int l){
              forall<typename POLICY::pol_j>(0, end_j, [=](int j){
                body(i, j, k, l);
              });
            });
          });
        });
      }

      template<typename POLICY, typename BODY>
      inline void forall4(LAYOUT_KJIL, int end_i, int end_j, int end_k, int end_l, BODY const &body){
        forall<typename POLICY::pol_k>(0, end_k, [=](int k){
          forall<typename POLICY::pol_j>(0, end_j, [=](int j){
            forall<typename POLICY::pol_i>(0, end_i, [=](int i){
              forall<typename POLICY::pol_l>(0, end_l, [=](int l){
                body(i, j, k, l);
              });
            });
          });
        });
      }

      template<typename POLICY, typename BODY>
      inline void forall4(LAYOUT_KJLI, int end_i, int end_j, int end_k, int end_l, BODY const &body){
        forall<typename POLICY::pol_k>(0, end_k, [=](int k){
          forall<typename POLICY::pol_j>(0, end_j, [=](int j){
            forall<typename POLICY::pol_l>(0, end_l, [=](int l){
              forall<typename POLICY::pol_i>(0, end_i, [=](int i){
                body(i, j, k, l);
              });
            });
          });
        });
      }

      template<typename POLICY, typename BODY>
      inline void forall4(LAYOUT_KLIJ, int end_i, int end_j, int end_k, int end_l, BODY const &body){
        forall<typename POLICY::pol_k>(0, end_k, [=](int k){
          forall<typename POLICY::pol_l>(0, end_l, [=](int l){
            forall<typename POLICY::pol_i>(0, end_i, [=](int i){
              forall<typename POLICY::pol_j>(0, end_j, [=](int j){
                body(i, j, k, l);
              });
            });
          });
        });
      }

      template<typename POLICY, typename BODY>
      inline void forall4(LAYOUT_KLJI, int end_i, int end_j, int end_k, int end_l, BODY const &body){
        forall<typename POLICY::pol_k>(0, end_k, [=](int k){
          forall<typename POLICY::pol_l>(0, end_l, [=](int l){
            forall<typename POLICY::pol_j>(0, end_j, [=](int j){
              forall<typename POLICY::pol_i>(0, end_i, [=](int i){
                body(i, j, k, l);
              });
            });
          });
        });
      }

      template<typename POLICY, typename BODY>
      inline void forall4(LAYOUT_LIJK, int end_i, int end_j, int end_k, int end_l, BODY const &body){
        forall<typename POLICY::pol_l>(0, end_l, [=](int l){
          forall<typename POLICY::pol_i>(0, end_i, [=](int i){
            forall<typename POLICY::pol_j>(0, end_j, [=](int j){
              forall<typename POLICY::pol_k>(0, end_k, [=](int k){
                body(i, j, k, l);
              });
            });
          });
        });
      }

      template<typename POLICY, typename BODY>
      inline void forall4(LAYOUT_LIKJ, int end_i, int end_j, int end_k, int end_l, BODY const &body){
        forall<typename POLICY::pol_l>(0, end_l, [=](int l){
          forall<typename POLICY::pol_i>(0, end_i, [=](int i){
            forall<typename POLICY::pol_k>(0, end_k, [=](int k){
              forall<typename POLICY::pol_j>(0, end_j, [=](int j){
                body(i, j, k, l);
              });
            });
          });
        });
      }

      template<typename POLICY, typename BODY>
      inline void forall4(LAYOUT_LJIK, int end_i, int end_j, int end_k, int end_l, BODY const &body){
        forall<typename POLICY::pol_l>(0, end_l, [=](int l){
          forall<typename POLICY::pol_j>(0, end_j, [=](int j){
            forall<typename POLICY::pol_i>(0, end_i, [=](int i){
              forall<typename POLICY::pol_k>(0, end_k, [=](int k){
                body(i, j, k, l);
              });
            });
          });
        });
      }

      template<typename POLICY, typename BODY>
      inline void forall4(LAYOUT_LJKI, int end_i, int end_j, int end_k, int end_l, BODY const &body){
        forall<typename POLICY::pol_l>(0, end_l, [=](int l){
          forall<typename POLICY::pol_j>(0, end_j, [=](int j){
            forall<typename POLICY::pol_k>(0, end_k, [=](int k){
              forall<typename POLICY::pol_i>(0, end_i, [=](int i){
                body(i, j, k, l);
              });
            });
          });
        });
      }

      template<typename POLICY, typename BODY>
      inline void forall4(LAYOUT_LKIJ, int end_i, int end_j, int end_k, int end_l, BODY const &body){
        forall<typename POLICY::pol_l>(0, end_l, [=](int l){
          forall<typename POLICY::pol_k>(0, end_k, [=](int k){
            forall<typename POLICY::pol_i>(0, end_i, [=](int i){
              forall<typename POLICY::pol_j>(0, end_j, [=](int j){
                body(i, j, k, l);
              });
            });
          });
        });
      }

      template<typename POLICY, typename BODY>
      inline void forall4(LAYOUT_LKJI, int end_i, int end_j, int end_k, int end_l, BODY const &body){
        forall<typename POLICY::pol_l>(0, end_l, [=](int l){
          forall<typename POLICY::pol_k>(0, end_k, [=](int k){
            forall<typename POLICY::pol_j>(0, end_j, [=](int j){
              forall<typename POLICY::pol_i>(0, end_i, [=](int i){
                body(i, j, k, l);
              });
            });
          });
        });
      }


  
#endif

