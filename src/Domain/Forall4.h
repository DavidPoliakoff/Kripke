//AUTOGENERATED BY genForallN.py
  
#ifndef __DOMAIN_FORALL4_H__
#define __DOMAIN_FORALL4_H__

#include<RAJA/RAJA.hxx>


    template<typename POLICY, typename TI, typename TJ, typename TK, typename TL, typename BODY>
    inline void forall4(TI const &is_i, TJ const &is_j, TK const &is_k, TL const &is_l, BODY const &body){
      typedef typename POLICY::LoopOrder L;
      forall4<POLICY, TI, TJ, TK, TL, BODY>(L(), is_i, is_j, is_k, is_l, body);
    }

    template<typename LOOP_ORDER, typename POL_I, typename POL_J, typename POL_K, typename POL_L>
    struct ForallPolicy4 {
      typedef LOOP_ORDER LoopOrder;
      typedef POL_I PolicyI;
      typedef POL_J PolicyJ;
      typedef POL_K PolicyK;
      typedef POL_L PolicyL;
    };


/******************************************************************
 *  Implementation for permutations of forall4()
 ******************************************************************/

      template<typename POLICY, typename TI, typename TJ, typename TK, typename TL, typename BODY>
      inline void forall4(PERM_IJKL, TI const &is_i, TJ const &is_j, TK const &is_k, TL const &is_l, BODY const &body){
        RAJA::forall<typename POLICY::PolicyI>(is_i, [=](int i){
          RAJA::forall<typename POLICY::PolicyJ>(is_j, [=](int j){
            RAJA::forall<typename POLICY::PolicyK>(is_k, [=](int k){
              RAJA::forall<typename POLICY::PolicyL>(is_l, [=](int l){
                body(i, j, k, l);
              });
            });
          });
        });
      }

      template<typename POLICY, typename TI, typename TJ, typename TK, typename TL, typename BODY>
      inline void forall4(PERM_IJLK, TI const &is_i, TJ const &is_j, TK const &is_k, TL const &is_l, BODY const &body){
        RAJA::forall<typename POLICY::PolicyI>(is_i, [=](int i){
          RAJA::forall<typename POLICY::PolicyJ>(is_j, [=](int j){
            RAJA::forall<typename POLICY::PolicyL>(is_l, [=](int l){
              RAJA::forall<typename POLICY::PolicyK>(is_k, [=](int k){
                body(i, j, k, l);
              });
            });
          });
        });
      }

      template<typename POLICY, typename TI, typename TJ, typename TK, typename TL, typename BODY>
      inline void forall4(PERM_IKJL, TI const &is_i, TJ const &is_j, TK const &is_k, TL const &is_l, BODY const &body){
        RAJA::forall<typename POLICY::PolicyI>(is_i, [=](int i){
          RAJA::forall<typename POLICY::PolicyK>(is_k, [=](int k){
            RAJA::forall<typename POLICY::PolicyJ>(is_j, [=](int j){
              RAJA::forall<typename POLICY::PolicyL>(is_l, [=](int l){
                body(i, j, k, l);
              });
            });
          });
        });
      }

      template<typename POLICY, typename TI, typename TJ, typename TK, typename TL, typename BODY>
      inline void forall4(PERM_IKLJ, TI const &is_i, TJ const &is_j, TK const &is_k, TL const &is_l, BODY const &body){
        RAJA::forall<typename POLICY::PolicyI>(is_i, [=](int i){
          RAJA::forall<typename POLICY::PolicyK>(is_k, [=](int k){
            RAJA::forall<typename POLICY::PolicyL>(is_l, [=](int l){
              RAJA::forall<typename POLICY::PolicyJ>(is_j, [=](int j){
                body(i, j, k, l);
              });
            });
          });
        });
      }

      template<typename POLICY, typename TI, typename TJ, typename TK, typename TL, typename BODY>
      inline void forall4(PERM_ILJK, TI const &is_i, TJ const &is_j, TK const &is_k, TL const &is_l, BODY const &body){
        RAJA::forall<typename POLICY::PolicyI>(is_i, [=](int i){
          RAJA::forall<typename POLICY::PolicyL>(is_l, [=](int l){
            RAJA::forall<typename POLICY::PolicyJ>(is_j, [=](int j){
              RAJA::forall<typename POLICY::PolicyK>(is_k, [=](int k){
                body(i, j, k, l);
              });
            });
          });
        });
      }

      template<typename POLICY, typename TI, typename TJ, typename TK, typename TL, typename BODY>
      inline void forall4(PERM_ILKJ, TI const &is_i, TJ const &is_j, TK const &is_k, TL const &is_l, BODY const &body){
        RAJA::forall<typename POLICY::PolicyI>(is_i, [=](int i){
          RAJA::forall<typename POLICY::PolicyL>(is_l, [=](int l){
            RAJA::forall<typename POLICY::PolicyK>(is_k, [=](int k){
              RAJA::forall<typename POLICY::PolicyJ>(is_j, [=](int j){
                body(i, j, k, l);
              });
            });
          });
        });
      }

      template<typename POLICY, typename TI, typename TJ, typename TK, typename TL, typename BODY>
      inline void forall4(PERM_JIKL, TI const &is_i, TJ const &is_j, TK const &is_k, TL const &is_l, BODY const &body){
        RAJA::forall<typename POLICY::PolicyJ>(is_j, [=](int j){
          RAJA::forall<typename POLICY::PolicyI>(is_i, [=](int i){
            RAJA::forall<typename POLICY::PolicyK>(is_k, [=](int k){
              RAJA::forall<typename POLICY::PolicyL>(is_l, [=](int l){
                body(i, j, k, l);
              });
            });
          });
        });
      }

      template<typename POLICY, typename TI, typename TJ, typename TK, typename TL, typename BODY>
      inline void forall4(PERM_JILK, TI const &is_i, TJ const &is_j, TK const &is_k, TL const &is_l, BODY const &body){
        RAJA::forall<typename POLICY::PolicyJ>(is_j, [=](int j){
          RAJA::forall<typename POLICY::PolicyI>(is_i, [=](int i){
            RAJA::forall<typename POLICY::PolicyL>(is_l, [=](int l){
              RAJA::forall<typename POLICY::PolicyK>(is_k, [=](int k){
                body(i, j, k, l);
              });
            });
          });
        });
      }

      template<typename POLICY, typename TI, typename TJ, typename TK, typename TL, typename BODY>
      inline void forall4(PERM_JKIL, TI const &is_i, TJ const &is_j, TK const &is_k, TL const &is_l, BODY const &body){
        RAJA::forall<typename POLICY::PolicyJ>(is_j, [=](int j){
          RAJA::forall<typename POLICY::PolicyK>(is_k, [=](int k){
            RAJA::forall<typename POLICY::PolicyI>(is_i, [=](int i){
              RAJA::forall<typename POLICY::PolicyL>(is_l, [=](int l){
                body(i, j, k, l);
              });
            });
          });
        });
      }

      template<typename POLICY, typename TI, typename TJ, typename TK, typename TL, typename BODY>
      inline void forall4(PERM_JKLI, TI const &is_i, TJ const &is_j, TK const &is_k, TL const &is_l, BODY const &body){
        RAJA::forall<typename POLICY::PolicyJ>(is_j, [=](int j){
          RAJA::forall<typename POLICY::PolicyK>(is_k, [=](int k){
            RAJA::forall<typename POLICY::PolicyL>(is_l, [=](int l){
              RAJA::forall<typename POLICY::PolicyI>(is_i, [=](int i){
                body(i, j, k, l);
              });
            });
          });
        });
      }

      template<typename POLICY, typename TI, typename TJ, typename TK, typename TL, typename BODY>
      inline void forall4(PERM_JLIK, TI const &is_i, TJ const &is_j, TK const &is_k, TL const &is_l, BODY const &body){
        RAJA::forall<typename POLICY::PolicyJ>(is_j, [=](int j){
          RAJA::forall<typename POLICY::PolicyL>(is_l, [=](int l){
            RAJA::forall<typename POLICY::PolicyI>(is_i, [=](int i){
              RAJA::forall<typename POLICY::PolicyK>(is_k, [=](int k){
                body(i, j, k, l);
              });
            });
          });
        });
      }

      template<typename POLICY, typename TI, typename TJ, typename TK, typename TL, typename BODY>
      inline void forall4(PERM_JLKI, TI const &is_i, TJ const &is_j, TK const &is_k, TL const &is_l, BODY const &body){
        RAJA::forall<typename POLICY::PolicyJ>(is_j, [=](int j){
          RAJA::forall<typename POLICY::PolicyL>(is_l, [=](int l){
            RAJA::forall<typename POLICY::PolicyK>(is_k, [=](int k){
              RAJA::forall<typename POLICY::PolicyI>(is_i, [=](int i){
                body(i, j, k, l);
              });
            });
          });
        });
      }

      template<typename POLICY, typename TI, typename TJ, typename TK, typename TL, typename BODY>
      inline void forall4(PERM_KIJL, TI const &is_i, TJ const &is_j, TK const &is_k, TL const &is_l, BODY const &body){
        RAJA::forall<typename POLICY::PolicyK>(is_k, [=](int k){
          RAJA::forall<typename POLICY::PolicyI>(is_i, [=](int i){
            RAJA::forall<typename POLICY::PolicyJ>(is_j, [=](int j){
              RAJA::forall<typename POLICY::PolicyL>(is_l, [=](int l){
                body(i, j, k, l);
              });
            });
          });
        });
      }

      template<typename POLICY, typename TI, typename TJ, typename TK, typename TL, typename BODY>
      inline void forall4(PERM_KILJ, TI const &is_i, TJ const &is_j, TK const &is_k, TL const &is_l, BODY const &body){
        RAJA::forall<typename POLICY::PolicyK>(is_k, [=](int k){
          RAJA::forall<typename POLICY::PolicyI>(is_i, [=](int i){
            RAJA::forall<typename POLICY::PolicyL>(is_l, [=](int l){
              RAJA::forall<typename POLICY::PolicyJ>(is_j, [=](int j){
                body(i, j, k, l);
              });
            });
          });
        });
      }

      template<typename POLICY, typename TI, typename TJ, typename TK, typename TL, typename BODY>
      inline void forall4(PERM_KJIL, TI const &is_i, TJ const &is_j, TK const &is_k, TL const &is_l, BODY const &body){
        RAJA::forall<typename POLICY::PolicyK>(is_k, [=](int k){
          RAJA::forall<typename POLICY::PolicyJ>(is_j, [=](int j){
            RAJA::forall<typename POLICY::PolicyI>(is_i, [=](int i){
              RAJA::forall<typename POLICY::PolicyL>(is_l, [=](int l){
                body(i, j, k, l);
              });
            });
          });
        });
      }

      template<typename POLICY, typename TI, typename TJ, typename TK, typename TL, typename BODY>
      inline void forall4(PERM_KJLI, TI const &is_i, TJ const &is_j, TK const &is_k, TL const &is_l, BODY const &body){
        RAJA::forall<typename POLICY::PolicyK>(is_k, [=](int k){
          RAJA::forall<typename POLICY::PolicyJ>(is_j, [=](int j){
            RAJA::forall<typename POLICY::PolicyL>(is_l, [=](int l){
              RAJA::forall<typename POLICY::PolicyI>(is_i, [=](int i){
                body(i, j, k, l);
              });
            });
          });
        });
      }

      template<typename POLICY, typename TI, typename TJ, typename TK, typename TL, typename BODY>
      inline void forall4(PERM_KLIJ, TI const &is_i, TJ const &is_j, TK const &is_k, TL const &is_l, BODY const &body){
        RAJA::forall<typename POLICY::PolicyK>(is_k, [=](int k){
          RAJA::forall<typename POLICY::PolicyL>(is_l, [=](int l){
            RAJA::forall<typename POLICY::PolicyI>(is_i, [=](int i){
              RAJA::forall<typename POLICY::PolicyJ>(is_j, [=](int j){
                body(i, j, k, l);
              });
            });
          });
        });
      }

      template<typename POLICY, typename TI, typename TJ, typename TK, typename TL, typename BODY>
      inline void forall4(PERM_KLJI, TI const &is_i, TJ const &is_j, TK const &is_k, TL const &is_l, BODY const &body){
        RAJA::forall<typename POLICY::PolicyK>(is_k, [=](int k){
          RAJA::forall<typename POLICY::PolicyL>(is_l, [=](int l){
            RAJA::forall<typename POLICY::PolicyJ>(is_j, [=](int j){
              RAJA::forall<typename POLICY::PolicyI>(is_i, [=](int i){
                body(i, j, k, l);
              });
            });
          });
        });
      }

      template<typename POLICY, typename TI, typename TJ, typename TK, typename TL, typename BODY>
      inline void forall4(PERM_LIJK, TI const &is_i, TJ const &is_j, TK const &is_k, TL const &is_l, BODY const &body){
        RAJA::forall<typename POLICY::PolicyL>(is_l, [=](int l){
          RAJA::forall<typename POLICY::PolicyI>(is_i, [=](int i){
            RAJA::forall<typename POLICY::PolicyJ>(is_j, [=](int j){
              RAJA::forall<typename POLICY::PolicyK>(is_k, [=](int k){
                body(i, j, k, l);
              });
            });
          });
        });
      }

      template<typename POLICY, typename TI, typename TJ, typename TK, typename TL, typename BODY>
      inline void forall4(PERM_LIKJ, TI const &is_i, TJ const &is_j, TK const &is_k, TL const &is_l, BODY const &body){
        RAJA::forall<typename POLICY::PolicyL>(is_l, [=](int l){
          RAJA::forall<typename POLICY::PolicyI>(is_i, [=](int i){
            RAJA::forall<typename POLICY::PolicyK>(is_k, [=](int k){
              RAJA::forall<typename POLICY::PolicyJ>(is_j, [=](int j){
                body(i, j, k, l);
              });
            });
          });
        });
      }

      template<typename POLICY, typename TI, typename TJ, typename TK, typename TL, typename BODY>
      inline void forall4(PERM_LJIK, TI const &is_i, TJ const &is_j, TK const &is_k, TL const &is_l, BODY const &body){
        RAJA::forall<typename POLICY::PolicyL>(is_l, [=](int l){
          RAJA::forall<typename POLICY::PolicyJ>(is_j, [=](int j){
            RAJA::forall<typename POLICY::PolicyI>(is_i, [=](int i){
              RAJA::forall<typename POLICY::PolicyK>(is_k, [=](int k){
                body(i, j, k, l);
              });
            });
          });
        });
      }

      template<typename POLICY, typename TI, typename TJ, typename TK, typename TL, typename BODY>
      inline void forall4(PERM_LJKI, TI const &is_i, TJ const &is_j, TK const &is_k, TL const &is_l, BODY const &body){
        RAJA::forall<typename POLICY::PolicyL>(is_l, [=](int l){
          RAJA::forall<typename POLICY::PolicyJ>(is_j, [=](int j){
            RAJA::forall<typename POLICY::PolicyK>(is_k, [=](int k){
              RAJA::forall<typename POLICY::PolicyI>(is_i, [=](int i){
                body(i, j, k, l);
              });
            });
          });
        });
      }

      template<typename POLICY, typename TI, typename TJ, typename TK, typename TL, typename BODY>
      inline void forall4(PERM_LKIJ, TI const &is_i, TJ const &is_j, TK const &is_k, TL const &is_l, BODY const &body){
        RAJA::forall<typename POLICY::PolicyL>(is_l, [=](int l){
          RAJA::forall<typename POLICY::PolicyK>(is_k, [=](int k){
            RAJA::forall<typename POLICY::PolicyI>(is_i, [=](int i){
              RAJA::forall<typename POLICY::PolicyJ>(is_j, [=](int j){
                body(i, j, k, l);
              });
            });
          });
        });
      }

      template<typename POLICY, typename TI, typename TJ, typename TK, typename TL, typename BODY>
      inline void forall4(PERM_LKJI, TI const &is_i, TJ const &is_j, TK const &is_k, TL const &is_l, BODY const &body){
        RAJA::forall<typename POLICY::PolicyL>(is_l, [=](int l){
          RAJA::forall<typename POLICY::PolicyK>(is_k, [=](int k){
            RAJA::forall<typename POLICY::PolicyJ>(is_j, [=](int j){
              RAJA::forall<typename POLICY::PolicyI>(is_i, [=](int i){
                body(i, j, k, l);
              });
            });
          });
        });
      }


  
#endif

