//AUTOGENERATED BY genLayout.py
  
#ifndef __DOMAIN_LAYOUT_H__
#define __DOMAIN_LAYOUT_H__



    struct LAYOUT_I {};
    struct LAYOUT_IJ {};
    struct LAYOUT_JI {};
    struct LAYOUT_IJK {};
    struct LAYOUT_IKJ {};
    struct LAYOUT_JIK {};
    struct LAYOUT_JKI {};
    struct LAYOUT_KIJ {};
    struct LAYOUT_KJI {};
    struct LAYOUT_IJKL {};
    struct LAYOUT_IJLK {};
    struct LAYOUT_IKJL {};
    struct LAYOUT_IKLJ {};
    struct LAYOUT_ILJK {};
    struct LAYOUT_ILKJ {};
    struct LAYOUT_JIKL {};
    struct LAYOUT_JILK {};
    struct LAYOUT_JKIL {};
    struct LAYOUT_JKLI {};
    struct LAYOUT_JLIK {};
    struct LAYOUT_JLKI {};
    struct LAYOUT_KIJL {};
    struct LAYOUT_KILJ {};
    struct LAYOUT_KJIL {};
    struct LAYOUT_KJLI {};
    struct LAYOUT_KLIJ {};
    struct LAYOUT_KLJI {};
    struct LAYOUT_LIJK {};
    struct LAYOUT_LIKJ {};
    struct LAYOUT_LJIK {};
    struct LAYOUT_LJKI {};
    struct LAYOUT_LKIJ {};
    struct LAYOUT_LKJI {};

    template<typename L>
    struct Layout1d {
        inline explicit Layout1d(int ni);
        inline int operator()(int i) const;
        inline void toIndices(int linear, int &i) const;

        int const size_i;

        int const stride_i;
    };

    template<typename L>
    struct Layout2d {
        inline Layout2d(int ni, int nj);
        inline int operator()(int i, int j) const;
        inline void toIndices(int linear, int &i, int &j) const;

        int const size_i;
        int const size_j;

        int const stride_i;
        int const stride_j;
    };

    template<typename L>
    struct Layout3d {
        inline Layout3d(int ni, int nj, int nk);
        inline int operator()(int i, int j, int k) const;
        inline void toIndices(int linear, int &i, int &j, int &k) const;

        int const size_i;
        int const size_j;
        int const size_k;

        int const stride_i;
        int const stride_j;
        int const stride_k;
    };

    template<typename L>
    struct Layout4d {
        inline Layout4d(int ni, int nj, int nk, int nl);
        inline int operator()(int i, int j, int k, int l) const;
        inline void toIndices(int linear, int &i, int &j, int &k, int &l) const;

        int const size_i;
        int const size_j;
        int const size_k;
        int const size_l;

        int const stride_i;
        int const stride_j;
        int const stride_k;
        int const stride_l;
    };


/******************************************************************
 *  Implementation for Layout1D
 ******************************************************************/

      template<>
      inline Layout1d<LAYOUT_I>::Layout1d(int ni):
        size_i(ni), stride_i(1)
      {
      }

      template<>
      inline int Layout1d<LAYOUT_I>::operator()(int i) const {
        return(i);
      }

      template<>
      inline void Layout1d<LAYOUT_I>::toIndices(int linear, int &i) const {
        i = linear;
      }


/******************************************************************
 *  Implementation for Layout2D
 ******************************************************************/

      template<>
      inline Layout2d<LAYOUT_IJ>::Layout2d(int ni, int nj):
        size_i(ni), size_j(nj), stride_i(nj), stride_j(1)
      {
      }

      template<>
      inline int Layout2d<LAYOUT_IJ>::operator()(int i, int j) const {
        return(i*stride_i + j);
      }

      template<>
      inline void Layout2d<LAYOUT_IJ>::toIndices(int linear, int &i, int &j) const {
        i = linear / (size_j);
        linear -= i*(size_j);
        j = linear;
      }

      template<>
      inline Layout2d<LAYOUT_JI>::Layout2d(int ni, int nj):
        size_i(ni), size_j(nj), stride_j(ni), stride_i(1)
      {
      }

      template<>
      inline int Layout2d<LAYOUT_JI>::operator()(int i, int j) const {
        return(j*stride_j + i);
      }

      template<>
      inline void Layout2d<LAYOUT_JI>::toIndices(int linear, int &i, int &j) const {
        j = linear / (size_i);
        linear -= j*(size_i);
        i = linear;
      }


/******************************************************************
 *  Implementation for Layout3D
 ******************************************************************/

      template<>
      inline Layout3d<LAYOUT_IJK>::Layout3d(int ni, int nj, int nk):
        size_i(ni), size_j(nj), size_k(nk), stride_i(nj*nk), stride_j(nk), stride_k(1)
      {
      }

      template<>
      inline int Layout3d<LAYOUT_IJK>::operator()(int i, int j, int k) const {
        return(i*stride_i + j*stride_j + k);
      }

      template<>
      inline void Layout3d<LAYOUT_IJK>::toIndices(int linear, int &i, int &j, int &k) const {
        i = linear / (size_j*size_k);
        linear -= i*(size_j*size_k);
        j = linear / (size_k);
        linear -= j*(size_k);
        k = linear;
      }

      template<>
      inline Layout3d<LAYOUT_IKJ>::Layout3d(int ni, int nj, int nk):
        size_i(ni), size_j(nj), size_k(nk), stride_i(nk*nj), stride_k(nj), stride_j(1)
      {
      }

      template<>
      inline int Layout3d<LAYOUT_IKJ>::operator()(int i, int j, int k) const {
        return(i*stride_i + k*stride_k + j);
      }

      template<>
      inline void Layout3d<LAYOUT_IKJ>::toIndices(int linear, int &i, int &j, int &k) const {
        i = linear / (size_k*size_j);
        linear -= i*(size_k*size_j);
        k = linear / (size_j);
        linear -= k*(size_j);
        j = linear;
      }

      template<>
      inline Layout3d<LAYOUT_JIK>::Layout3d(int ni, int nj, int nk):
        size_i(ni), size_j(nj), size_k(nk), stride_j(ni*nk), stride_i(nk), stride_k(1)
      {
      }

      template<>
      inline int Layout3d<LAYOUT_JIK>::operator()(int i, int j, int k) const {
        return(j*stride_j + i*stride_i + k);
      }

      template<>
      inline void Layout3d<LAYOUT_JIK>::toIndices(int linear, int &i, int &j, int &k) const {
        j = linear / (size_i*size_k);
        linear -= j*(size_i*size_k);
        i = linear / (size_k);
        linear -= i*(size_k);
        k = linear;
      }

      template<>
      inline Layout3d<LAYOUT_JKI>::Layout3d(int ni, int nj, int nk):
        size_i(ni), size_j(nj), size_k(nk), stride_j(nk*ni), stride_k(ni), stride_i(1)
      {
      }

      template<>
      inline int Layout3d<LAYOUT_JKI>::operator()(int i, int j, int k) const {
        return(j*stride_j + k*stride_k + i);
      }

      template<>
      inline void Layout3d<LAYOUT_JKI>::toIndices(int linear, int &i, int &j, int &k) const {
        j = linear / (size_k*size_i);
        linear -= j*(size_k*size_i);
        k = linear / (size_i);
        linear -= k*(size_i);
        i = linear;
      }

      template<>
      inline Layout3d<LAYOUT_KIJ>::Layout3d(int ni, int nj, int nk):
        size_i(ni), size_j(nj), size_k(nk), stride_k(ni*nj), stride_i(nj), stride_j(1)
      {
      }

      template<>
      inline int Layout3d<LAYOUT_KIJ>::operator()(int i, int j, int k) const {
        return(k*stride_k + i*stride_i + j);
      }

      template<>
      inline void Layout3d<LAYOUT_KIJ>::toIndices(int linear, int &i, int &j, int &k) const {
        k = linear / (size_i*size_j);
        linear -= k*(size_i*size_j);
        i = linear / (size_j);
        linear -= i*(size_j);
        j = linear;
      }

      template<>
      inline Layout3d<LAYOUT_KJI>::Layout3d(int ni, int nj, int nk):
        size_i(ni), size_j(nj), size_k(nk), stride_k(nj*ni), stride_j(ni), stride_i(1)
      {
      }

      template<>
      inline int Layout3d<LAYOUT_KJI>::operator()(int i, int j, int k) const {
        return(k*stride_k + j*stride_j + i);
      }

      template<>
      inline void Layout3d<LAYOUT_KJI>::toIndices(int linear, int &i, int &j, int &k) const {
        k = linear / (size_j*size_i);
        linear -= k*(size_j*size_i);
        j = linear / (size_i);
        linear -= j*(size_i);
        i = linear;
      }


/******************************************************************
 *  Implementation for Layout4D
 ******************************************************************/

      template<>
      inline Layout4d<LAYOUT_IJKL>::Layout4d(int ni, int nj, int nk, int nl):
        size_i(ni), size_j(nj), size_k(nk), size_l(nl), stride_i(nj*nk*nl), stride_j(nk*nl), stride_k(nl), stride_l(1)
      {
      }

      template<>
      inline int Layout4d<LAYOUT_IJKL>::operator()(int i, int j, int k, int l) const {
        return(i*stride_i + j*stride_j + k*stride_k + l);
      }

      template<>
      inline void Layout4d<LAYOUT_IJKL>::toIndices(int linear, int &i, int &j, int &k, int &l) const {
        i = linear / (size_j*size_k*size_l);
        linear -= i*(size_j*size_k*size_l);
        j = linear / (size_k*size_l);
        linear -= j*(size_k*size_l);
        k = linear / (size_l);
        linear -= k*(size_l);
        l = linear;
      }

      template<>
      inline Layout4d<LAYOUT_IJLK>::Layout4d(int ni, int nj, int nk, int nl):
        size_i(ni), size_j(nj), size_k(nk), size_l(nl), stride_i(nj*nl*nk), stride_j(nl*nk), stride_l(nk), stride_k(1)
      {
      }

      template<>
      inline int Layout4d<LAYOUT_IJLK>::operator()(int i, int j, int k, int l) const {
        return(i*stride_i + j*stride_j + l*stride_l + k);
      }

      template<>
      inline void Layout4d<LAYOUT_IJLK>::toIndices(int linear, int &i, int &j, int &k, int &l) const {
        i = linear / (size_j*size_l*size_k);
        linear -= i*(size_j*size_l*size_k);
        j = linear / (size_l*size_k);
        linear -= j*(size_l*size_k);
        l = linear / (size_k);
        linear -= l*(size_k);
        k = linear;
      }

      template<>
      inline Layout4d<LAYOUT_IKJL>::Layout4d(int ni, int nj, int nk, int nl):
        size_i(ni), size_j(nj), size_k(nk), size_l(nl), stride_i(nk*nj*nl), stride_k(nj*nl), stride_j(nl), stride_l(1)
      {
      }

      template<>
      inline int Layout4d<LAYOUT_IKJL>::operator()(int i, int j, int k, int l) const {
        return(i*stride_i + k*stride_k + j*stride_j + l);
      }

      template<>
      inline void Layout4d<LAYOUT_IKJL>::toIndices(int linear, int &i, int &j, int &k, int &l) const {
        i = linear / (size_k*size_j*size_l);
        linear -= i*(size_k*size_j*size_l);
        k = linear / (size_j*size_l);
        linear -= k*(size_j*size_l);
        j = linear / (size_l);
        linear -= j*(size_l);
        l = linear;
      }

      template<>
      inline Layout4d<LAYOUT_IKLJ>::Layout4d(int ni, int nj, int nk, int nl):
        size_i(ni), size_j(nj), size_k(nk), size_l(nl), stride_i(nk*nl*nj), stride_k(nl*nj), stride_l(nj), stride_j(1)
      {
      }

      template<>
      inline int Layout4d<LAYOUT_IKLJ>::operator()(int i, int j, int k, int l) const {
        return(i*stride_i + k*stride_k + l*stride_l + j);
      }

      template<>
      inline void Layout4d<LAYOUT_IKLJ>::toIndices(int linear, int &i, int &j, int &k, int &l) const {
        i = linear / (size_k*size_l*size_j);
        linear -= i*(size_k*size_l*size_j);
        k = linear / (size_l*size_j);
        linear -= k*(size_l*size_j);
        l = linear / (size_j);
        linear -= l*(size_j);
        j = linear;
      }

      template<>
      inline Layout4d<LAYOUT_ILJK>::Layout4d(int ni, int nj, int nk, int nl):
        size_i(ni), size_j(nj), size_k(nk), size_l(nl), stride_i(nl*nj*nk), stride_l(nj*nk), stride_j(nk), stride_k(1)
      {
      }

      template<>
      inline int Layout4d<LAYOUT_ILJK>::operator()(int i, int j, int k, int l) const {
        return(i*stride_i + l*stride_l + j*stride_j + k);
      }

      template<>
      inline void Layout4d<LAYOUT_ILJK>::toIndices(int linear, int &i, int &j, int &k, int &l) const {
        i = linear / (size_l*size_j*size_k);
        linear -= i*(size_l*size_j*size_k);
        l = linear / (size_j*size_k);
        linear -= l*(size_j*size_k);
        j = linear / (size_k);
        linear -= j*(size_k);
        k = linear;
      }

      template<>
      inline Layout4d<LAYOUT_ILKJ>::Layout4d(int ni, int nj, int nk, int nl):
        size_i(ni), size_j(nj), size_k(nk), size_l(nl), stride_i(nl*nk*nj), stride_l(nk*nj), stride_k(nj), stride_j(1)
      {
      }

      template<>
      inline int Layout4d<LAYOUT_ILKJ>::operator()(int i, int j, int k, int l) const {
        return(i*stride_i + l*stride_l + k*stride_k + j);
      }

      template<>
      inline void Layout4d<LAYOUT_ILKJ>::toIndices(int linear, int &i, int &j, int &k, int &l) const {
        i = linear / (size_l*size_k*size_j);
        linear -= i*(size_l*size_k*size_j);
        l = linear / (size_k*size_j);
        linear -= l*(size_k*size_j);
        k = linear / (size_j);
        linear -= k*(size_j);
        j = linear;
      }

      template<>
      inline Layout4d<LAYOUT_JIKL>::Layout4d(int ni, int nj, int nk, int nl):
        size_i(ni), size_j(nj), size_k(nk), size_l(nl), stride_j(ni*nk*nl), stride_i(nk*nl), stride_k(nl), stride_l(1)
      {
      }

      template<>
      inline int Layout4d<LAYOUT_JIKL>::operator()(int i, int j, int k, int l) const {
        return(j*stride_j + i*stride_i + k*stride_k + l);
      }

      template<>
      inline void Layout4d<LAYOUT_JIKL>::toIndices(int linear, int &i, int &j, int &k, int &l) const {
        j = linear / (size_i*size_k*size_l);
        linear -= j*(size_i*size_k*size_l);
        i = linear / (size_k*size_l);
        linear -= i*(size_k*size_l);
        k = linear / (size_l);
        linear -= k*(size_l);
        l = linear;
      }

      template<>
      inline Layout4d<LAYOUT_JILK>::Layout4d(int ni, int nj, int nk, int nl):
        size_i(ni), size_j(nj), size_k(nk), size_l(nl), stride_j(ni*nl*nk), stride_i(nl*nk), stride_l(nk), stride_k(1)
      {
      }

      template<>
      inline int Layout4d<LAYOUT_JILK>::operator()(int i, int j, int k, int l) const {
        return(j*stride_j + i*stride_i + l*stride_l + k);
      }

      template<>
      inline void Layout4d<LAYOUT_JILK>::toIndices(int linear, int &i, int &j, int &k, int &l) const {
        j = linear / (size_i*size_l*size_k);
        linear -= j*(size_i*size_l*size_k);
        i = linear / (size_l*size_k);
        linear -= i*(size_l*size_k);
        l = linear / (size_k);
        linear -= l*(size_k);
        k = linear;
      }

      template<>
      inline Layout4d<LAYOUT_JKIL>::Layout4d(int ni, int nj, int nk, int nl):
        size_i(ni), size_j(nj), size_k(nk), size_l(nl), stride_j(nk*ni*nl), stride_k(ni*nl), stride_i(nl), stride_l(1)
      {
      }

      template<>
      inline int Layout4d<LAYOUT_JKIL>::operator()(int i, int j, int k, int l) const {
        return(j*stride_j + k*stride_k + i*stride_i + l);
      }

      template<>
      inline void Layout4d<LAYOUT_JKIL>::toIndices(int linear, int &i, int &j, int &k, int &l) const {
        j = linear / (size_k*size_i*size_l);
        linear -= j*(size_k*size_i*size_l);
        k = linear / (size_i*size_l);
        linear -= k*(size_i*size_l);
        i = linear / (size_l);
        linear -= i*(size_l);
        l = linear;
      }

      template<>
      inline Layout4d<LAYOUT_JKLI>::Layout4d(int ni, int nj, int nk, int nl):
        size_i(ni), size_j(nj), size_k(nk), size_l(nl), stride_j(nk*nl*ni), stride_k(nl*ni), stride_l(ni), stride_i(1)
      {
      }

      template<>
      inline int Layout4d<LAYOUT_JKLI>::operator()(int i, int j, int k, int l) const {
        return(j*stride_j + k*stride_k + l*stride_l + i);
      }

      template<>
      inline void Layout4d<LAYOUT_JKLI>::toIndices(int linear, int &i, int &j, int &k, int &l) const {
        j = linear / (size_k*size_l*size_i);
        linear -= j*(size_k*size_l*size_i);
        k = linear / (size_l*size_i);
        linear -= k*(size_l*size_i);
        l = linear / (size_i);
        linear -= l*(size_i);
        i = linear;
      }

      template<>
      inline Layout4d<LAYOUT_JLIK>::Layout4d(int ni, int nj, int nk, int nl):
        size_i(ni), size_j(nj), size_k(nk), size_l(nl), stride_j(nl*ni*nk), stride_l(ni*nk), stride_i(nk), stride_k(1)
      {
      }

      template<>
      inline int Layout4d<LAYOUT_JLIK>::operator()(int i, int j, int k, int l) const {
        return(j*stride_j + l*stride_l + i*stride_i + k);
      }

      template<>
      inline void Layout4d<LAYOUT_JLIK>::toIndices(int linear, int &i, int &j, int &k, int &l) const {
        j = linear / (size_l*size_i*size_k);
        linear -= j*(size_l*size_i*size_k);
        l = linear / (size_i*size_k);
        linear -= l*(size_i*size_k);
        i = linear / (size_k);
        linear -= i*(size_k);
        k = linear;
      }

      template<>
      inline Layout4d<LAYOUT_JLKI>::Layout4d(int ni, int nj, int nk, int nl):
        size_i(ni), size_j(nj), size_k(nk), size_l(nl), stride_j(nl*nk*ni), stride_l(nk*ni), stride_k(ni), stride_i(1)
      {
      }

      template<>
      inline int Layout4d<LAYOUT_JLKI>::operator()(int i, int j, int k, int l) const {
        return(j*stride_j + l*stride_l + k*stride_k + i);
      }

      template<>
      inline void Layout4d<LAYOUT_JLKI>::toIndices(int linear, int &i, int &j, int &k, int &l) const {
        j = linear / (size_l*size_k*size_i);
        linear -= j*(size_l*size_k*size_i);
        l = linear / (size_k*size_i);
        linear -= l*(size_k*size_i);
        k = linear / (size_i);
        linear -= k*(size_i);
        i = linear;
      }

      template<>
      inline Layout4d<LAYOUT_KIJL>::Layout4d(int ni, int nj, int nk, int nl):
        size_i(ni), size_j(nj), size_k(nk), size_l(nl), stride_k(ni*nj*nl), stride_i(nj*nl), stride_j(nl), stride_l(1)
      {
      }

      template<>
      inline int Layout4d<LAYOUT_KIJL>::operator()(int i, int j, int k, int l) const {
        return(k*stride_k + i*stride_i + j*stride_j + l);
      }

      template<>
      inline void Layout4d<LAYOUT_KIJL>::toIndices(int linear, int &i, int &j, int &k, int &l) const {
        k = linear / (size_i*size_j*size_l);
        linear -= k*(size_i*size_j*size_l);
        i = linear / (size_j*size_l);
        linear -= i*(size_j*size_l);
        j = linear / (size_l);
        linear -= j*(size_l);
        l = linear;
      }

      template<>
      inline Layout4d<LAYOUT_KILJ>::Layout4d(int ni, int nj, int nk, int nl):
        size_i(ni), size_j(nj), size_k(nk), size_l(nl), stride_k(ni*nl*nj), stride_i(nl*nj), stride_l(nj), stride_j(1)
      {
      }

      template<>
      inline int Layout4d<LAYOUT_KILJ>::operator()(int i, int j, int k, int l) const {
        return(k*stride_k + i*stride_i + l*stride_l + j);
      }

      template<>
      inline void Layout4d<LAYOUT_KILJ>::toIndices(int linear, int &i, int &j, int &k, int &l) const {
        k = linear / (size_i*size_l*size_j);
        linear -= k*(size_i*size_l*size_j);
        i = linear / (size_l*size_j);
        linear -= i*(size_l*size_j);
        l = linear / (size_j);
        linear -= l*(size_j);
        j = linear;
      }

      template<>
      inline Layout4d<LAYOUT_KJIL>::Layout4d(int ni, int nj, int nk, int nl):
        size_i(ni), size_j(nj), size_k(nk), size_l(nl), stride_k(nj*ni*nl), stride_j(ni*nl), stride_i(nl), stride_l(1)
      {
      }

      template<>
      inline int Layout4d<LAYOUT_KJIL>::operator()(int i, int j, int k, int l) const {
        return(k*stride_k + j*stride_j + i*stride_i + l);
      }

      template<>
      inline void Layout4d<LAYOUT_KJIL>::toIndices(int linear, int &i, int &j, int &k, int &l) const {
        k = linear / (size_j*size_i*size_l);
        linear -= k*(size_j*size_i*size_l);
        j = linear / (size_i*size_l);
        linear -= j*(size_i*size_l);
        i = linear / (size_l);
        linear -= i*(size_l);
        l = linear;
      }

      template<>
      inline Layout4d<LAYOUT_KJLI>::Layout4d(int ni, int nj, int nk, int nl):
        size_i(ni), size_j(nj), size_k(nk), size_l(nl), stride_k(nj*nl*ni), stride_j(nl*ni), stride_l(ni), stride_i(1)
      {
      }

      template<>
      inline int Layout4d<LAYOUT_KJLI>::operator()(int i, int j, int k, int l) const {
        return(k*stride_k + j*stride_j + l*stride_l + i);
      }

      template<>
      inline void Layout4d<LAYOUT_KJLI>::toIndices(int linear, int &i, int &j, int &k, int &l) const {
        k = linear / (size_j*size_l*size_i);
        linear -= k*(size_j*size_l*size_i);
        j = linear / (size_l*size_i);
        linear -= j*(size_l*size_i);
        l = linear / (size_i);
        linear -= l*(size_i);
        i = linear;
      }

      template<>
      inline Layout4d<LAYOUT_KLIJ>::Layout4d(int ni, int nj, int nk, int nl):
        size_i(ni), size_j(nj), size_k(nk), size_l(nl), stride_k(nl*ni*nj), stride_l(ni*nj), stride_i(nj), stride_j(1)
      {
      }

      template<>
      inline int Layout4d<LAYOUT_KLIJ>::operator()(int i, int j, int k, int l) const {
        return(k*stride_k + l*stride_l + i*stride_i + j);
      }

      template<>
      inline void Layout4d<LAYOUT_KLIJ>::toIndices(int linear, int &i, int &j, int &k, int &l) const {
        k = linear / (size_l*size_i*size_j);
        linear -= k*(size_l*size_i*size_j);
        l = linear / (size_i*size_j);
        linear -= l*(size_i*size_j);
        i = linear / (size_j);
        linear -= i*(size_j);
        j = linear;
      }

      template<>
      inline Layout4d<LAYOUT_KLJI>::Layout4d(int ni, int nj, int nk, int nl):
        size_i(ni), size_j(nj), size_k(nk), size_l(nl), stride_k(nl*nj*ni), stride_l(nj*ni), stride_j(ni), stride_i(1)
      {
      }

      template<>
      inline int Layout4d<LAYOUT_KLJI>::operator()(int i, int j, int k, int l) const {
        return(k*stride_k + l*stride_l + j*stride_j + i);
      }

      template<>
      inline void Layout4d<LAYOUT_KLJI>::toIndices(int linear, int &i, int &j, int &k, int &l) const {
        k = linear / (size_l*size_j*size_i);
        linear -= k*(size_l*size_j*size_i);
        l = linear / (size_j*size_i);
        linear -= l*(size_j*size_i);
        j = linear / (size_i);
        linear -= j*(size_i);
        i = linear;
      }

      template<>
      inline Layout4d<LAYOUT_LIJK>::Layout4d(int ni, int nj, int nk, int nl):
        size_i(ni), size_j(nj), size_k(nk), size_l(nl), stride_l(ni*nj*nk), stride_i(nj*nk), stride_j(nk), stride_k(1)
      {
      }

      template<>
      inline int Layout4d<LAYOUT_LIJK>::operator()(int i, int j, int k, int l) const {
        return(l*stride_l + i*stride_i + j*stride_j + k);
      }

      template<>
      inline void Layout4d<LAYOUT_LIJK>::toIndices(int linear, int &i, int &j, int &k, int &l) const {
        l = linear / (size_i*size_j*size_k);
        linear -= l*(size_i*size_j*size_k);
        i = linear / (size_j*size_k);
        linear -= i*(size_j*size_k);
        j = linear / (size_k);
        linear -= j*(size_k);
        k = linear;
      }

      template<>
      inline Layout4d<LAYOUT_LIKJ>::Layout4d(int ni, int nj, int nk, int nl):
        size_i(ni), size_j(nj), size_k(nk), size_l(nl), stride_l(ni*nk*nj), stride_i(nk*nj), stride_k(nj), stride_j(1)
      {
      }

      template<>
      inline int Layout4d<LAYOUT_LIKJ>::operator()(int i, int j, int k, int l) const {
        return(l*stride_l + i*stride_i + k*stride_k + j);
      }

      template<>
      inline void Layout4d<LAYOUT_LIKJ>::toIndices(int linear, int &i, int &j, int &k, int &l) const {
        l = linear / (size_i*size_k*size_j);
        linear -= l*(size_i*size_k*size_j);
        i = linear / (size_k*size_j);
        linear -= i*(size_k*size_j);
        k = linear / (size_j);
        linear -= k*(size_j);
        j = linear;
      }

      template<>
      inline Layout4d<LAYOUT_LJIK>::Layout4d(int ni, int nj, int nk, int nl):
        size_i(ni), size_j(nj), size_k(nk), size_l(nl), stride_l(nj*ni*nk), stride_j(ni*nk), stride_i(nk), stride_k(1)
      {
      }

      template<>
      inline int Layout4d<LAYOUT_LJIK>::operator()(int i, int j, int k, int l) const {
        return(l*stride_l + j*stride_j + i*stride_i + k);
      }

      template<>
      inline void Layout4d<LAYOUT_LJIK>::toIndices(int linear, int &i, int &j, int &k, int &l) const {
        l = linear / (size_j*size_i*size_k);
        linear -= l*(size_j*size_i*size_k);
        j = linear / (size_i*size_k);
        linear -= j*(size_i*size_k);
        i = linear / (size_k);
        linear -= i*(size_k);
        k = linear;
      }

      template<>
      inline Layout4d<LAYOUT_LJKI>::Layout4d(int ni, int nj, int nk, int nl):
        size_i(ni), size_j(nj), size_k(nk), size_l(nl), stride_l(nj*nk*ni), stride_j(nk*ni), stride_k(ni), stride_i(1)
      {
      }

      template<>
      inline int Layout4d<LAYOUT_LJKI>::operator()(int i, int j, int k, int l) const {
        return(l*stride_l + j*stride_j + k*stride_k + i);
      }

      template<>
      inline void Layout4d<LAYOUT_LJKI>::toIndices(int linear, int &i, int &j, int &k, int &l) const {
        l = linear / (size_j*size_k*size_i);
        linear -= l*(size_j*size_k*size_i);
        j = linear / (size_k*size_i);
        linear -= j*(size_k*size_i);
        k = linear / (size_i);
        linear -= k*(size_i);
        i = linear;
      }

      template<>
      inline Layout4d<LAYOUT_LKIJ>::Layout4d(int ni, int nj, int nk, int nl):
        size_i(ni), size_j(nj), size_k(nk), size_l(nl), stride_l(nk*ni*nj), stride_k(ni*nj), stride_i(nj), stride_j(1)
      {
      }

      template<>
      inline int Layout4d<LAYOUT_LKIJ>::operator()(int i, int j, int k, int l) const {
        return(l*stride_l + k*stride_k + i*stride_i + j);
      }

      template<>
      inline void Layout4d<LAYOUT_LKIJ>::toIndices(int linear, int &i, int &j, int &k, int &l) const {
        l = linear / (size_k*size_i*size_j);
        linear -= l*(size_k*size_i*size_j);
        k = linear / (size_i*size_j);
        linear -= k*(size_i*size_j);
        i = linear / (size_j);
        linear -= i*(size_j);
        j = linear;
      }

      template<>
      inline Layout4d<LAYOUT_LKJI>::Layout4d(int ni, int nj, int nk, int nl):
        size_i(ni), size_j(nj), size_k(nk), size_l(nl), stride_l(nk*nj*ni), stride_k(nj*ni), stride_j(ni), stride_i(1)
      {
      }

      template<>
      inline int Layout4d<LAYOUT_LKJI>::operator()(int i, int j, int k, int l) const {
        return(l*stride_l + k*stride_k + j*stride_j + i);
      }

      template<>
      inline void Layout4d<LAYOUT_LKJI>::toIndices(int linear, int &i, int &j, int &k, int &l) const {
        l = linear / (size_k*size_j*size_i);
        linear -= l*(size_k*size_j*size_i);
        k = linear / (size_j*size_i);
        linear -= k*(size_j*size_i);
        j = linear / (size_i);
        linear -= j*(size_i);
        i = linear;
      }


  
#endif

