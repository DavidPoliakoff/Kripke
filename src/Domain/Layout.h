//AUTOGENERATED BY genLayout.py
  
#ifndef __DOMAIN_LAYOUT_H__
#define __DOMAIN_LAYOUT_H__



    enum LAYOUT1D {
      LAYOUT_I
    };

    enum LAYOUT2D {
      LAYOUT_IJ,
      LAYOUT_JI
    };

    enum LAYOUT3D {
      LAYOUT_IJK,
      LAYOUT_IKJ,
      LAYOUT_JIK,
      LAYOUT_JKI,
      LAYOUT_KIJ,
      LAYOUT_KJI
    };

    enum LAYOUT4D {
      LAYOUT_IJKL,
      LAYOUT_IJLK,
      LAYOUT_IKJL,
      LAYOUT_IKLJ,
      LAYOUT_ILJK,
      LAYOUT_ILKJ,
      LAYOUT_JIKL,
      LAYOUT_JILK,
      LAYOUT_JKIL,
      LAYOUT_JKLI,
      LAYOUT_JLIK,
      LAYOUT_JLKI,
      LAYOUT_KIJL,
      LAYOUT_KILJ,
      LAYOUT_KJIL,
      LAYOUT_KJLI,
      LAYOUT_KLIJ,
      LAYOUT_KLJI,
      LAYOUT_LIJK,
      LAYOUT_LIKJ,
      LAYOUT_LJIK,
      LAYOUT_LJKI,
      LAYOUT_LKIJ,
      LAYOUT_LKJI
    };


    template<LAYOUT1D L>
    struct Layout1d {
        inline explicit Layout1d(int ni);
        inline int operator()(int i) const;
        inline void toIndices(int linear, int &i) const;

        int const size_i;
    };

    template<LAYOUT2D L>
    struct Layout2d {
        inline Layout2d(int ni, int nj);
        inline int operator()(int i, int j) const;
        inline void toIndices(int linear, int &i, int &j) const;

        int const size_i;
        int const size_j;
    };

    template<LAYOUT3D L>
    struct Layout3d {
        inline Layout3d(int ni, int nj, int nk);
        inline int operator()(int i, int j, int k) const;
        inline void toIndices(int linear, int &i, int &j, int &k) const;

        int const size_i;
        int const size_j;
        int const size_k;
    };

    template<LAYOUT4D L>
    struct Layout4d {
        inline Layout4d(int ni, int nj, int nk, int nl);
        inline int operator()(int i, int j, int k, int l) const;
        inline void toIndices(int linear, int &i, int &j, int &k, int &l) const;

        int const size_i;
        int const size_j;
        int const size_k;
        int const size_l;
    };

    template<typename T, LAYOUT1D L>
    struct View1d {
        inline View1d(T *data_ptr, int ni);
        inline T const &operator()(int i) const;
        inline T &operator()(int i);

        Layout1d<L> const layout;
        T *data;
    };

    template<typename T, LAYOUT2D L>
    struct View2d {
        inline View2d(T *data_ptr, int ni, int nj);
        inline T const &operator()(int i, int j) const;
        inline T &operator()(int i, int j);

        Layout2d<L> const layout;
        T * __restrict__ data;
    };

    template<typename T, LAYOUT3D L>
    struct View3d {
        inline View3d(T *data_ptr, int ni, int nj, int nk);
        inline T const &operator()(int i, int j, int k) const;
        inline T &operator()(int i, int j, int k);

        Layout3d<L> const layout;
        T * __restrict__ data;
    };

    template<typename T, LAYOUT4D L>
    struct View4d {
        inline View4d(T *data_ptr, int ni, int nj, int nk, int nl);
        inline T const &operator()(int i, int j, int k, int l) const;
        inline T &operator()(int i, int j, int k, int l);

        Layout4d<L> const layout;
        T *data;
    };


/******************************************************************
 *  Implementation for Layout1D
 ******************************************************************/

      template<>
      inline Layout1d<LAYOUT_I>::Layout1d(int ni):
        size_i(ni)
      {
      }

      template<>
      inline int Layout1d<LAYOUT_I>::operator()(int i) const {
        return(i);
      }

      template<>
      inline void Layout1d<LAYOUT_I>::toIndices(int linear, int &i) const {
        i = linear;
      }


/******************************************************************
 *  Implementation for Layout2D
 ******************************************************************/

      template<>
      inline Layout2d<LAYOUT_IJ>::Layout2d(int ni, int nj):
        size_i(ni), size_j(nj)
      {
      }

      template<>
      inline int Layout2d<LAYOUT_IJ>::operator()(int i, int j) const {
        return(i*(size_j) + j);
      }

      template<>
      inline void Layout2d<LAYOUT_IJ>::toIndices(int linear, int &i, int &j) const {
        i = linear / (size_j);
        linear -= i*(size_j);
        j = linear;
      }

      template<>
      inline Layout2d<LAYOUT_JI>::Layout2d(int ni, int nj):
        size_i(ni), size_j(nj)
      {
      }

      template<>
      inline int Layout2d<LAYOUT_JI>::operator()(int i, int j) const {
        return(j*(size_i) + i);
      }

      template<>
      inline void Layout2d<LAYOUT_JI>::toIndices(int linear, int &i, int &j) const {
        j = linear / (size_i);
        linear -= j*(size_i);
        i = linear;
      }


/******************************************************************
 *  Implementation for Layout3D
 ******************************************************************/

      template<>
      inline Layout3d<LAYOUT_IJK>::Layout3d(int ni, int nj, int nk):
        size_i(ni), size_j(nj), size_k(nk)
      {
      }

      template<>
      inline int Layout3d<LAYOUT_IJK>::operator()(int i, int j, int k) const {
        return(i*(size_j*size_k) + j*(size_k) + k);
      }

      template<>
      inline void Layout3d<LAYOUT_IJK>::toIndices(int linear, int &i, int &j, int &k) const {
        i = linear / (size_j*size_k);
        linear -= i*(size_j*size_k);
        j = linear / (size_k);
        linear -= j*(size_k);
        k = linear;
      }

      template<>
      inline Layout3d<LAYOUT_IKJ>::Layout3d(int ni, int nj, int nk):
        size_i(ni), size_j(nj), size_k(nk)
      {
      }

      template<>
      inline int Layout3d<LAYOUT_IKJ>::operator()(int i, int j, int k) const {
        return(i*(size_k*size_j) + k*(size_j) + j);
      }

      template<>
      inline void Layout3d<LAYOUT_IKJ>::toIndices(int linear, int &i, int &j, int &k) const {
        i = linear / (size_k*size_j);
        linear -= i*(size_k*size_j);
        k = linear / (size_j);
        linear -= k*(size_j);
        j = linear;
      }

      template<>
      inline Layout3d<LAYOUT_JIK>::Layout3d(int ni, int nj, int nk):
        size_i(ni), size_j(nj), size_k(nk)
      {
      }

      template<>
      inline int Layout3d<LAYOUT_JIK>::operator()(int i, int j, int k) const {
        return(j*(size_i*size_k) + i*(size_k) + k);
      }

      template<>
      inline void Layout3d<LAYOUT_JIK>::toIndices(int linear, int &i, int &j, int &k) const {
        j = linear / (size_i*size_k);
        linear -= j*(size_i*size_k);
        i = linear / (size_k);
        linear -= i*(size_k);
        k = linear;
      }

      template<>
      inline Layout3d<LAYOUT_JKI>::Layout3d(int ni, int nj, int nk):
        size_i(ni), size_j(nj), size_k(nk)
      {
      }

      template<>
      inline int Layout3d<LAYOUT_JKI>::operator()(int i, int j, int k) const {
        return(j*(size_k*size_i) + k*(size_i) + i);
      }

      template<>
      inline void Layout3d<LAYOUT_JKI>::toIndices(int linear, int &i, int &j, int &k) const {
        j = linear / (size_k*size_i);
        linear -= j*(size_k*size_i);
        k = linear / (size_i);
        linear -= k*(size_i);
        i = linear;
      }

      template<>
      inline Layout3d<LAYOUT_KIJ>::Layout3d(int ni, int nj, int nk):
        size_i(ni), size_j(nj), size_k(nk)
      {
      }

      template<>
      inline int Layout3d<LAYOUT_KIJ>::operator()(int i, int j, int k) const {
        return(k*(size_i*size_j) + i*(size_j) + j);
      }

      template<>
      inline void Layout3d<LAYOUT_KIJ>::toIndices(int linear, int &i, int &j, int &k) const {
        k = linear / (size_i*size_j);
        linear -= k*(size_i*size_j);
        i = linear / (size_j);
        linear -= i*(size_j);
        j = linear;
      }

      template<>
      inline Layout3d<LAYOUT_KJI>::Layout3d(int ni, int nj, int nk):
        size_i(ni), size_j(nj), size_k(nk)
      {
      }

      template<>
      inline int Layout3d<LAYOUT_KJI>::operator()(int i, int j, int k) const {
        return(k*(size_j*size_i) + j*(size_i) + i);
      }

      template<>
      inline void Layout3d<LAYOUT_KJI>::toIndices(int linear, int &i, int &j, int &k) const {
        k = linear / (size_j*size_i);
        linear -= k*(size_j*size_i);
        j = linear / (size_i);
        linear -= j*(size_i);
        i = linear;
      }


/******************************************************************
 *  Implementation for Layout4D
 ******************************************************************/

      template<>
      inline Layout4d<LAYOUT_IJKL>::Layout4d(int ni, int nj, int nk, int nl):
        size_i(ni), size_j(nj), size_k(nk), size_l(nl)
      {
      }

      template<>
      inline int Layout4d<LAYOUT_IJKL>::operator()(int i, int j, int k, int l) const {
        return(i*(size_j*size_k*size_l) + j*(size_k*size_l) + k*(size_l) + l);
      }

      template<>
      inline void Layout4d<LAYOUT_IJKL>::toIndices(int linear, int &i, int &j, int &k, int &l) const {
        i = linear / (size_j*size_k*size_l);
        linear -= i*(size_j*size_k*size_l);
        j = linear / (size_k*size_l);
        linear -= j*(size_k*size_l);
        k = linear / (size_l);
        linear -= k*(size_l);
        l = linear;
      }

      template<>
      inline Layout4d<LAYOUT_IJLK>::Layout4d(int ni, int nj, int nk, int nl):
        size_i(ni), size_j(nj), size_k(nk), size_l(nl)
      {
      }

      template<>
      inline int Layout4d<LAYOUT_IJLK>::operator()(int i, int j, int k, int l) const {
        return(i*(size_j*size_l*size_k) + j*(size_l*size_k) + l*(size_k) + k);
      }

      template<>
      inline void Layout4d<LAYOUT_IJLK>::toIndices(int linear, int &i, int &j, int &k, int &l) const {
        i = linear / (size_j*size_l*size_k);
        linear -= i*(size_j*size_l*size_k);
        j = linear / (size_l*size_k);
        linear -= j*(size_l*size_k);
        l = linear / (size_k);
        linear -= l*(size_k);
        k = linear;
      }

      template<>
      inline Layout4d<LAYOUT_IKJL>::Layout4d(int ni, int nj, int nk, int nl):
        size_i(ni), size_j(nj), size_k(nk), size_l(nl)
      {
      }

      template<>
      inline int Layout4d<LAYOUT_IKJL>::operator()(int i, int j, int k, int l) const {
        return(i*(size_k*size_j*size_l) + k*(size_j*size_l) + j*(size_l) + l);
      }

      template<>
      inline void Layout4d<LAYOUT_IKJL>::toIndices(int linear, int &i, int &j, int &k, int &l) const {
        i = linear / (size_k*size_j*size_l);
        linear -= i*(size_k*size_j*size_l);
        k = linear / (size_j*size_l);
        linear -= k*(size_j*size_l);
        j = linear / (size_l);
        linear -= j*(size_l);
        l = linear;
      }

      template<>
      inline Layout4d<LAYOUT_IKLJ>::Layout4d(int ni, int nj, int nk, int nl):
        size_i(ni), size_j(nj), size_k(nk), size_l(nl)
      {
      }

      template<>
      inline int Layout4d<LAYOUT_IKLJ>::operator()(int i, int j, int k, int l) const {
        return(i*(size_k*size_l*size_j) + k*(size_l*size_j) + l*(size_j) + j);
      }

      template<>
      inline void Layout4d<LAYOUT_IKLJ>::toIndices(int linear, int &i, int &j, int &k, int &l) const {
        i = linear / (size_k*size_l*size_j);
        linear -= i*(size_k*size_l*size_j);
        k = linear / (size_l*size_j);
        linear -= k*(size_l*size_j);
        l = linear / (size_j);
        linear -= l*(size_j);
        j = linear;
      }

      template<>
      inline Layout4d<LAYOUT_ILJK>::Layout4d(int ni, int nj, int nk, int nl):
        size_i(ni), size_j(nj), size_k(nk), size_l(nl)
      {
      }

      template<>
      inline int Layout4d<LAYOUT_ILJK>::operator()(int i, int j, int k, int l) const {
        return(i*(size_l*size_j*size_k) + l*(size_j*size_k) + j*(size_k) + k);
      }

      template<>
      inline void Layout4d<LAYOUT_ILJK>::toIndices(int linear, int &i, int &j, int &k, int &l) const {
        i = linear / (size_l*size_j*size_k);
        linear -= i*(size_l*size_j*size_k);
        l = linear / (size_j*size_k);
        linear -= l*(size_j*size_k);
        j = linear / (size_k);
        linear -= j*(size_k);
        k = linear;
      }

      template<>
      inline Layout4d<LAYOUT_ILKJ>::Layout4d(int ni, int nj, int nk, int nl):
        size_i(ni), size_j(nj), size_k(nk), size_l(nl)
      {
      }

      template<>
      inline int Layout4d<LAYOUT_ILKJ>::operator()(int i, int j, int k, int l) const {
        return(i*(size_l*size_k*size_j) + l*(size_k*size_j) + k*(size_j) + j);
      }

      template<>
      inline void Layout4d<LAYOUT_ILKJ>::toIndices(int linear, int &i, int &j, int &k, int &l) const {
        i = linear / (size_l*size_k*size_j);
        linear -= i*(size_l*size_k*size_j);
        l = linear / (size_k*size_j);
        linear -= l*(size_k*size_j);
        k = linear / (size_j);
        linear -= k*(size_j);
        j = linear;
      }

      template<>
      inline Layout4d<LAYOUT_JIKL>::Layout4d(int ni, int nj, int nk, int nl):
        size_i(ni), size_j(nj), size_k(nk), size_l(nl)
      {
      }

      template<>
      inline int Layout4d<LAYOUT_JIKL>::operator()(int i, int j, int k, int l) const {
        return(j*(size_i*size_k*size_l) + i*(size_k*size_l) + k*(size_l) + l);
      }

      template<>
      inline void Layout4d<LAYOUT_JIKL>::toIndices(int linear, int &i, int &j, int &k, int &l) const {
        j = linear / (size_i*size_k*size_l);
        linear -= j*(size_i*size_k*size_l);
        i = linear / (size_k*size_l);
        linear -= i*(size_k*size_l);
        k = linear / (size_l);
        linear -= k*(size_l);
        l = linear;
      }

      template<>
      inline Layout4d<LAYOUT_JILK>::Layout4d(int ni, int nj, int nk, int nl):
        size_i(ni), size_j(nj), size_k(nk), size_l(nl)
      {
      }

      template<>
      inline int Layout4d<LAYOUT_JILK>::operator()(int i, int j, int k, int l) const {
        return(j*(size_i*size_l*size_k) + i*(size_l*size_k) + l*(size_k) + k);
      }

      template<>
      inline void Layout4d<LAYOUT_JILK>::toIndices(int linear, int &i, int &j, int &k, int &l) const {
        j = linear / (size_i*size_l*size_k);
        linear -= j*(size_i*size_l*size_k);
        i = linear / (size_l*size_k);
        linear -= i*(size_l*size_k);
        l = linear / (size_k);
        linear -= l*(size_k);
        k = linear;
      }

      template<>
      inline Layout4d<LAYOUT_JKIL>::Layout4d(int ni, int nj, int nk, int nl):
        size_i(ni), size_j(nj), size_k(nk), size_l(nl)
      {
      }

      template<>
      inline int Layout4d<LAYOUT_JKIL>::operator()(int i, int j, int k, int l) const {
        return(j*(size_k*size_i*size_l) + k*(size_i*size_l) + i*(size_l) + l);
      }

      template<>
      inline void Layout4d<LAYOUT_JKIL>::toIndices(int linear, int &i, int &j, int &k, int &l) const {
        j = linear / (size_k*size_i*size_l);
        linear -= j*(size_k*size_i*size_l);
        k = linear / (size_i*size_l);
        linear -= k*(size_i*size_l);
        i = linear / (size_l);
        linear -= i*(size_l);
        l = linear;
      }

      template<>
      inline Layout4d<LAYOUT_JKLI>::Layout4d(int ni, int nj, int nk, int nl):
        size_i(ni), size_j(nj), size_k(nk), size_l(nl)
      {
      }

      template<>
      inline int Layout4d<LAYOUT_JKLI>::operator()(int i, int j, int k, int l) const {
        return(j*(size_k*size_l*size_i) + k*(size_l*size_i) + l*(size_i) + i);
      }

      template<>
      inline void Layout4d<LAYOUT_JKLI>::toIndices(int linear, int &i, int &j, int &k, int &l) const {
        j = linear / (size_k*size_l*size_i);
        linear -= j*(size_k*size_l*size_i);
        k = linear / (size_l*size_i);
        linear -= k*(size_l*size_i);
        l = linear / (size_i);
        linear -= l*(size_i);
        i = linear;
      }

      template<>
      inline Layout4d<LAYOUT_JLIK>::Layout4d(int ni, int nj, int nk, int nl):
        size_i(ni), size_j(nj), size_k(nk), size_l(nl)
      {
      }

      template<>
      inline int Layout4d<LAYOUT_JLIK>::operator()(int i, int j, int k, int l) const {
        return(j*(size_l*size_i*size_k) + l*(size_i*size_k) + i*(size_k) + k);
      }

      template<>
      inline void Layout4d<LAYOUT_JLIK>::toIndices(int linear, int &i, int &j, int &k, int &l) const {
        j = linear / (size_l*size_i*size_k);
        linear -= j*(size_l*size_i*size_k);
        l = linear / (size_i*size_k);
        linear -= l*(size_i*size_k);
        i = linear / (size_k);
        linear -= i*(size_k);
        k = linear;
      }

      template<>
      inline Layout4d<LAYOUT_JLKI>::Layout4d(int ni, int nj, int nk, int nl):
        size_i(ni), size_j(nj), size_k(nk), size_l(nl)
      {
      }

      template<>
      inline int Layout4d<LAYOUT_JLKI>::operator()(int i, int j, int k, int l) const {
        return(j*(size_l*size_k*size_i) + l*(size_k*size_i) + k*(size_i) + i);
      }

      template<>
      inline void Layout4d<LAYOUT_JLKI>::toIndices(int linear, int &i, int &j, int &k, int &l) const {
        j = linear / (size_l*size_k*size_i);
        linear -= j*(size_l*size_k*size_i);
        l = linear / (size_k*size_i);
        linear -= l*(size_k*size_i);
        k = linear / (size_i);
        linear -= k*(size_i);
        i = linear;
      }

      template<>
      inline Layout4d<LAYOUT_KIJL>::Layout4d(int ni, int nj, int nk, int nl):
        size_i(ni), size_j(nj), size_k(nk), size_l(nl)
      {
      }

      template<>
      inline int Layout4d<LAYOUT_KIJL>::operator()(int i, int j, int k, int l) const {
        return(k*(size_i*size_j*size_l) + i*(size_j*size_l) + j*(size_l) + l);
      }

      template<>
      inline void Layout4d<LAYOUT_KIJL>::toIndices(int linear, int &i, int &j, int &k, int &l) const {
        k = linear / (size_i*size_j*size_l);
        linear -= k*(size_i*size_j*size_l);
        i = linear / (size_j*size_l);
        linear -= i*(size_j*size_l);
        j = linear / (size_l);
        linear -= j*(size_l);
        l = linear;
      }

      template<>
      inline Layout4d<LAYOUT_KILJ>::Layout4d(int ni, int nj, int nk, int nl):
        size_i(ni), size_j(nj), size_k(nk), size_l(nl)
      {
      }

      template<>
      inline int Layout4d<LAYOUT_KILJ>::operator()(int i, int j, int k, int l) const {
        return(k*(size_i*size_l*size_j) + i*(size_l*size_j) + l*(size_j) + j);
      }

      template<>
      inline void Layout4d<LAYOUT_KILJ>::toIndices(int linear, int &i, int &j, int &k, int &l) const {
        k = linear / (size_i*size_l*size_j);
        linear -= k*(size_i*size_l*size_j);
        i = linear / (size_l*size_j);
        linear -= i*(size_l*size_j);
        l = linear / (size_j);
        linear -= l*(size_j);
        j = linear;
      }

      template<>
      inline Layout4d<LAYOUT_KJIL>::Layout4d(int ni, int nj, int nk, int nl):
        size_i(ni), size_j(nj), size_k(nk), size_l(nl)
      {
      }

      template<>
      inline int Layout4d<LAYOUT_KJIL>::operator()(int i, int j, int k, int l) const {
        return(k*(size_j*size_i*size_l) + j*(size_i*size_l) + i*(size_l) + l);
      }

      template<>
      inline void Layout4d<LAYOUT_KJIL>::toIndices(int linear, int &i, int &j, int &k, int &l) const {
        k = linear / (size_j*size_i*size_l);
        linear -= k*(size_j*size_i*size_l);
        j = linear / (size_i*size_l);
        linear -= j*(size_i*size_l);
        i = linear / (size_l);
        linear -= i*(size_l);
        l = linear;
      }

      template<>
      inline Layout4d<LAYOUT_KJLI>::Layout4d(int ni, int nj, int nk, int nl):
        size_i(ni), size_j(nj), size_k(nk), size_l(nl)
      {
      }

      template<>
      inline int Layout4d<LAYOUT_KJLI>::operator()(int i, int j, int k, int l) const {
        return(k*(size_j*size_l*size_i) + j*(size_l*size_i) + l*(size_i) + i);
      }

      template<>
      inline void Layout4d<LAYOUT_KJLI>::toIndices(int linear, int &i, int &j, int &k, int &l) const {
        k = linear / (size_j*size_l*size_i);
        linear -= k*(size_j*size_l*size_i);
        j = linear / (size_l*size_i);
        linear -= j*(size_l*size_i);
        l = linear / (size_i);
        linear -= l*(size_i);
        i = linear;
      }

      template<>
      inline Layout4d<LAYOUT_KLIJ>::Layout4d(int ni, int nj, int nk, int nl):
        size_i(ni), size_j(nj), size_k(nk), size_l(nl)
      {
      }

      template<>
      inline int Layout4d<LAYOUT_KLIJ>::operator()(int i, int j, int k, int l) const {
        return(k*(size_l*size_i*size_j) + l*(size_i*size_j) + i*(size_j) + j);
      }

      template<>
      inline void Layout4d<LAYOUT_KLIJ>::toIndices(int linear, int &i, int &j, int &k, int &l) const {
        k = linear / (size_l*size_i*size_j);
        linear -= k*(size_l*size_i*size_j);
        l = linear / (size_i*size_j);
        linear -= l*(size_i*size_j);
        i = linear / (size_j);
        linear -= i*(size_j);
        j = linear;
      }

      template<>
      inline Layout4d<LAYOUT_KLJI>::Layout4d(int ni, int nj, int nk, int nl):
        size_i(ni), size_j(nj), size_k(nk), size_l(nl)
      {
      }

      template<>
      inline int Layout4d<LAYOUT_KLJI>::operator()(int i, int j, int k, int l) const {
        return(k*(size_l*size_j*size_i) + l*(size_j*size_i) + j*(size_i) + i);
      }

      template<>
      inline void Layout4d<LAYOUT_KLJI>::toIndices(int linear, int &i, int &j, int &k, int &l) const {
        k = linear / (size_l*size_j*size_i);
        linear -= k*(size_l*size_j*size_i);
        l = linear / (size_j*size_i);
        linear -= l*(size_j*size_i);
        j = linear / (size_i);
        linear -= j*(size_i);
        i = linear;
      }

      template<>
      inline Layout4d<LAYOUT_LIJK>::Layout4d(int ni, int nj, int nk, int nl):
        size_i(ni), size_j(nj), size_k(nk), size_l(nl)
      {
      }

      template<>
      inline int Layout4d<LAYOUT_LIJK>::operator()(int i, int j, int k, int l) const {
        return(l*(size_i*size_j*size_k) + i*(size_j*size_k) + j*(size_k) + k);
      }

      template<>
      inline void Layout4d<LAYOUT_LIJK>::toIndices(int linear, int &i, int &j, int &k, int &l) const {
        l = linear / (size_i*size_j*size_k);
        linear -= l*(size_i*size_j*size_k);
        i = linear / (size_j*size_k);
        linear -= i*(size_j*size_k);
        j = linear / (size_k);
        linear -= j*(size_k);
        k = linear;
      }

      template<>
      inline Layout4d<LAYOUT_LIKJ>::Layout4d(int ni, int nj, int nk, int nl):
        size_i(ni), size_j(nj), size_k(nk), size_l(nl)
      {
      }

      template<>
      inline int Layout4d<LAYOUT_LIKJ>::operator()(int i, int j, int k, int l) const {
        return(l*(size_i*size_k*size_j) + i*(size_k*size_j) + k*(size_j) + j);
      }

      template<>
      inline void Layout4d<LAYOUT_LIKJ>::toIndices(int linear, int &i, int &j, int &k, int &l) const {
        l = linear / (size_i*size_k*size_j);
        linear -= l*(size_i*size_k*size_j);
        i = linear / (size_k*size_j);
        linear -= i*(size_k*size_j);
        k = linear / (size_j);
        linear -= k*(size_j);
        j = linear;
      }

      template<>
      inline Layout4d<LAYOUT_LJIK>::Layout4d(int ni, int nj, int nk, int nl):
        size_i(ni), size_j(nj), size_k(nk), size_l(nl)
      {
      }

      template<>
      inline int Layout4d<LAYOUT_LJIK>::operator()(int i, int j, int k, int l) const {
        return(l*(size_j*size_i*size_k) + j*(size_i*size_k) + i*(size_k) + k);
      }

      template<>
      inline void Layout4d<LAYOUT_LJIK>::toIndices(int linear, int &i, int &j, int &k, int &l) const {
        l = linear / (size_j*size_i*size_k);
        linear -= l*(size_j*size_i*size_k);
        j = linear / (size_i*size_k);
        linear -= j*(size_i*size_k);
        i = linear / (size_k);
        linear -= i*(size_k);
        k = linear;
      }

      template<>
      inline Layout4d<LAYOUT_LJKI>::Layout4d(int ni, int nj, int nk, int nl):
        size_i(ni), size_j(nj), size_k(nk), size_l(nl)
      {
      }

      template<>
      inline int Layout4d<LAYOUT_LJKI>::operator()(int i, int j, int k, int l) const {
        return(l*(size_j*size_k*size_i) + j*(size_k*size_i) + k*(size_i) + i);
      }

      template<>
      inline void Layout4d<LAYOUT_LJKI>::toIndices(int linear, int &i, int &j, int &k, int &l) const {
        l = linear / (size_j*size_k*size_i);
        linear -= l*(size_j*size_k*size_i);
        j = linear / (size_k*size_i);
        linear -= j*(size_k*size_i);
        k = linear / (size_i);
        linear -= k*(size_i);
        i = linear;
      }

      template<>
      inline Layout4d<LAYOUT_LKIJ>::Layout4d(int ni, int nj, int nk, int nl):
        size_i(ni), size_j(nj), size_k(nk), size_l(nl)
      {
      }

      template<>
      inline int Layout4d<LAYOUT_LKIJ>::operator()(int i, int j, int k, int l) const {
        return(l*(size_k*size_i*size_j) + k*(size_i*size_j) + i*(size_j) + j);
      }

      template<>
      inline void Layout4d<LAYOUT_LKIJ>::toIndices(int linear, int &i, int &j, int &k, int &l) const {
        l = linear / (size_k*size_i*size_j);
        linear -= l*(size_k*size_i*size_j);
        k = linear / (size_i*size_j);
        linear -= k*(size_i*size_j);
        i = linear / (size_j);
        linear -= i*(size_j);
        j = linear;
      }

      template<>
      inline Layout4d<LAYOUT_LKJI>::Layout4d(int ni, int nj, int nk, int nl):
        size_i(ni), size_j(nj), size_k(nk), size_l(nl)
      {
      }

      template<>
      inline int Layout4d<LAYOUT_LKJI>::operator()(int i, int j, int k, int l) const {
        return(l*(size_k*size_j*size_i) + k*(size_j*size_i) + j*(size_i) + i);
      }

      template<>
      inline void Layout4d<LAYOUT_LKJI>::toIndices(int linear, int &i, int &j, int &k, int &l) const {
        l = linear / (size_k*size_j*size_i);
        linear -= l*(size_k*size_j*size_i);
        k = linear / (size_j*size_i);
        linear -= k*(size_j*size_i);
        j = linear / (size_i);
        linear -= j*(size_i);
        i = linear;
      }


/******************************************************************
 *  Implementation for View1D
 ******************************************************************/

      template<typename T, LAYOUT1D L>
      inline View1d<T,L>::View1d(T *data_ptr, int ni):
        layout(ni),
        data(data_ptr)
      {
      }

      template<typename T, LAYOUT1D L>
      inline T const &View1d<T,L>::operator()(int i) const {
        return(data[layout(i)]);
      }

      template<typename T, LAYOUT1D L>
      inline T &View1d<T,L>::operator()(int i){
        return(data[layout(i)]);
      }


/******************************************************************
 *  Implementation for View2D
 ******************************************************************/

      template<typename T, LAYOUT2D L>
      inline View2d<T,L>::View2d(T *data_ptr, int ni, int nj):
        layout(ni, nj),
        data(data_ptr)
      {
      }

      template<typename T, LAYOUT2D L>
      inline T const &View2d<T,L>::operator()(int i, int j) const {
        return(data[layout(i, j)]);
      }

      template<typename T, LAYOUT2D L>
      inline T &View2d<T,L>::operator()(int i, int j){
        return(data[layout(i, j)]);
      }


/******************************************************************
 *  Implementation for View3D
 ******************************************************************/

      template<typename T, LAYOUT3D L>
      inline View3d<T,L>::View3d(T *data_ptr, int ni, int nj, int nk):
        layout(ni, nj, nk),
        data(data_ptr)
      {
      }

      template<typename T, LAYOUT3D L>
      inline T const &View3d<T,L>::operator()(int i, int j, int k) const {
        return(data[layout(i, j, k)]);
      }

      template<typename T, LAYOUT3D L>
      inline T &View3d<T,L>::operator()(int i, int j, int k){
        return(data[layout(i, j, k)]);
      }


/******************************************************************
 *  Implementation for View4D
 ******************************************************************/

      template<typename T, LAYOUT4D L>
      inline View4d<T,L>::View4d(T *data_ptr, int ni, int nj, int nk, int nl):
        layout(ni, nj, nk, nl),
        data(data_ptr)
      {
      }

      template<typename T, LAYOUT4D L>
      inline T const &View4d<T,L>::operator()(int i, int j, int k, int l) const {
        return(data[layout(i, j, k, l)]);
      }

      template<typename T, LAYOUT4D L>
      inline T &View4d<T,L>::operator()(int i, int j, int k, int l){
        return(data[layout(i, j, k, l)]);
      }


  
#endif

