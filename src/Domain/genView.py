#!/usr/bin/env python

import sys
from itertools import permutations
from lperm import *
 

def writeView(ndims_list):

  for ndims in ndims_list:
    dim_names = getDimNames(ndims)
  
    # Open struct definition
    print "    template<typename DataType, typename Layout>"
    print "    struct View%dd {" % ndims
    
    # Create some typedef's to describe the template parameters
    print "      typedef typename Layout::Permutation Permutation;"
    for a in dim_names:
      print "      typedef typename Layout::Index%s Index%s;" % (a.upper(), a.upper())
    print ""
    
    # Add local variables
    print "      Layout const layout;"
    print "      DataType *data;"
    print ""
        
    # Define constructor
    args = map(lambda a: "int n"+a, dim_names)
    argstr = ", ".join(args)
    print "      inline View%dd(DataType *data_ptr, %s):" % (ndims, argstr)
    args = map(lambda a: "n"+a, dim_names)
    argstr = ", ".join(args)
    print "        layout(%s)," % argstr
    print "        data(data_ptr)"
    print "      {}"
    print ""
    
    # Define () Operator (const)
    args = map(lambda a: "Index%s %s"%(a.upper(), a), dim_names)
    argstr = ", ".join(args)
    print "      RAJA_HOST_DEVICE inline DataType &operator()(%s) const {" % argstr
    argstr = ", ".join(dim_names)
    print "        return data[convertIndex<int>(layout(%s))];" % argstr
    print "      }"
        
    print "    };"
    print ""
 


# ACTUAL SCRIPT ENTRY:
print """//AUTOGENERATED BY genView.py
  
#ifndef __DOMAIN_VIEW_H__
#define __DOMAIN_VIEW_H__

#include "Layout.h"

"""

ndims_list = range(1,4+1)

# Dump all declarations (with documentation, etc)
writeView(ndims_list)


print """
  
#endif
"""

