#!/usr/bin/env python

import sys
from itertools import permutations
from lperm import *
 

def writeViewDecl(ndims_list):

  for ndims in ndims_list:
    dim_names = getDimNames(ndims)
  
    print "    template<typename T, typename L>"
    print "    struct View%dd {" % ndims
    
    # Define constructor
    args = map(lambda a: "int n"+a, dim_names)
    argstr = ", ".join(args)
    print "        inline View%dd(T *data_ptr, %s);" % (ndims, argstr)
    
    # Define () Operator (const)
    args = map(lambda a: "int "+a, dim_names)
    argstr = ", ".join(args)
    print "        inline T &operator()(%s) const;" % argstr
    
    # Add local variables
    print ""
    print "        Layout%dd<L> const layout;" % ndims
    print "        T *data;"
    print "    };"
    print ""


def writeViewImpl(ndims_list):

  for ndims in ndims_list:
    dim_names = getDimNames(ndims)
    
    print ""
    print "/******************************************************************"
    print " *  Implementation for View%dD" % ndims
    print " ******************************************************************/"
    print ""
                
    # Define constructor
    args = map(lambda a: "int n"+a, dim_names)
    argstr = ", ".join(args)    
    print "      template<typename T, typename L>"
    print "      inline View%dd<T,L>::View%dd(T *data_ptr, %s):" % (ndims, ndims, argstr)    
    args = map(lambda a: "n"+a, dim_names)
    argstr = ", ".join(args)
    print "        layout(%s)," % argstr
    print "        data(data_ptr)"
    print "      {"
    print "      }"
    print ""

    # Define () Operator (const)
    args = map(lambda a: "int "+a, dim_names)
    argstr = ", ".join(args)      
    print "      template<typename T, typename L>"
    print "      inline T &View%dd<T,L>::operator()(%s) const {" % (ndims, argstr)
    argstr = ", ".join(dim_names)
    print "        return(data[layout(%s)]);" % argstr
    print "      }"
    print ""
               
  
 


# ACTUAL SCRIPT ENTRY:
print """//AUTOGENERATED BY genView.py
  
#ifndef __DOMAIN_VIEW_H__
#define __DOMAIN_VIEW_H__

#include "Layout.h"

"""

ndims_list = range(1,4+1)

# Dump all declarations (with documentation, etc)
writeViewDecl(ndims_list)

# Dump all implementations and specializations
writeViewImpl(ndims_list)

print """
  
#endif
"""

