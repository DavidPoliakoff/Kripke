#!/usr/bin/env python

import sys
from itertools import permutations
from lperm import *

def writeForallBase(ndims):

  dim_names = getDimNames(ndims)

  
  args = map(lambda a: "typename T"+a.upper(), dim_names)
  argstr = ", ".join(args)    
  print "    template<typename POLICY, %s, typename BODY>" % argstr
  
  args = map(lambda a: "T%s const &is_%s"%(a.upper(), a), dim_names)
  argstr = ", ".join(args)
  print "    RAJA_INLINE void forall%d(%s, BODY const &body){" % (ndims, argstr)
  
  args = map(lambda a: "T"+a.upper(), dim_names)
  argstr = ", ".join(args)    
  
  args = map(lambda a: "is_"+a, dim_names)
  argstr2 = ", ".join(args)
  print "      typedef typename POLICY::LoopOrder L;"
  print "      forall%d<POLICY, %s, BODY>(L(), %s, body);" % (ndims, argstr, argstr2)
  print "    }"  
  print ""


def writeForallPolicy(ndims):

  dim_names = getDimNames(ndims)

  args = map(lambda a: "typename POL_"+(a.upper()), dim_names)
  argstr = ", ".join(args)
  print "    template<typename LOOP_ORDER, %s>" % argstr
  print "    struct ForallPolicy%d {" % (ndims)
  
  args = map(lambda a: "end_"+a, dim_names)
  argstr = ", ".join(args)
  print "      typedef LOOP_ORDER LoopOrder;"
  for dim in dim_names:
    print "      typedef POL_%s Policy%s;" % (dim.upper(), dim.upper())
  print "    };"
  print ""
  

def writeForallImpl(ndims):

  dim_names = getDimNames(ndims)
  
  print ""
  print "/******************************************************************"
  print " *  Implementation for permutations of forall%d()" % ndims
  print " ******************************************************************/"
  print ""
  
    
  # Loop over each permutation specialization
  perms = getDimPerms(dim_names)
  for perm in perms:
    # get enumeration name
    enum = getEnumName(perm)
  
    # print function declaration
    args = map(lambda a: "typename T"+a.upper(), dim_names)
    argstr = ", ".join(args)    
    print "      template<typename POLICY, %s, typename BODY>" % argstr
    
    args = map(lambda a: "T%s const &is_%s"%(a.upper(), a), dim_names)
    argstr = ", ".join(args)    
    print "      RAJA_INLINE void forall%d(%s, %s, BODY const &body){" % (ndims, enum, argstr)    
    
    # print each nested "forall" loop
    indent = "  "
    closing = []
    for i in range(0,ndims):
      d = perm[i]
      #print "%s      RAJA::forall<typename POLICY::Policy%s>(RAJA::RangeSegment(0, end_%s), [=](int %s){" % (indent, d.upper(), d, d)  
      print "%s      RAJA::forall<typename POLICY::Policy%s>(is_%s, [=](int %s){" % (indent, d.upper(), d, d)      
      closing.append("%s      });" % indent)
      indent = indent + "  "
    
    print "%s      body(%s);" % (indent, ", ".join(dim_names))
    closing.reverse()
    for c in closing:
      print c
    print "      }"
  
    print ""

ndims = int(sys.argv[1])


# ACTUAL SCRIPT ENTRY:
print """//AUTOGENERATED BY genForallN.py
  
#ifndef __DOMAIN_FORALL%d_H__
#define __DOMAIN_FORALL%d_H__

#include<RAJA/RAJA.hxx>

""" % (ndims, ndims)


# Dump all declarations (with documentation, etc)
writeForallBase(ndims)
writeForallPolicy(ndims)

# Dump all implementations and specializations
writeForallImpl(ndims)

print """
  
#endif
"""

